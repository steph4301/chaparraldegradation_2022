# Annotations for Equation Labels
annotate("text", x = 70, y = 98, label = eq_label_scl, color = "gray30", size = 4, hjust = 0) +
annotate("text", x = 67, y = 80, label = eq_label_ss, color = "grey30", size = 4, hjust = 0)
fig.1a
ggplot(data = cover_byleaftype_wide %>%  filter(shrub_native_sclerophyllous > 0.01),
aes(x = grass_nonnative_NA*100,
y = shrub_native_sclerophyllous*100)) +
# geom_point()+
geom_point(aes(color = site), size = 3) +
scale_color_manual(values = c("blue", "maroon", "maroon", "maroon", "maroon", "maroon")) +
geom_smooth(method = "lm", se = TRUE, color = "gray50", linetype = "solid") + # se = confidence interval
labs(
x = "Non-native grass cover (%)",
y = "Native scl shrub cover (%)",
title = "Linear regression of  scl shrub cover by non-native grass cover"
) +
scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) + # Set x-axis limits and breaks
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) + # Set y-axis limits and breaks
theme_bw()
# Fit the linear model
model.s <- lm(shrub_native_sclerophyllous ~ grass_nonnative_NA, data = cover_byleaftype_wide %>% filter(shrub_native_sclerophyllous > 0.01)) # response variable ~ independent variable
# print slope and intercept
cf <- round(coef(model.s), 3)
cat("Intercept:", cf[1], "\n")
cat("Slope:", cf[2], "\n")
# cf <- coef(model.s).   # <-- old code
# Intercept <- cf$(Intercept)
# Slope <- cf[2]
# Intercept <- round(Intercept, 3)
# Slope <- round(Slope, 3)
# print(paste("Intercept:", Intercept))
# print(paste("Slope:", Slope))
# Print the summary of the model
model.s_summary <- summary(model.s)
cat("Multiple R^2:", round(summary(model.s)$r.squared, 3), "\n")
# # Extract the R^2 value
# r_squared <- round(model.s_summary$r.squared, 3)   # <- old code
# print(paste("Multiple R^2:", r_squared))
# [1] "Multiple R^2: 0.442"
ggplot(data = cover_byleaftype_wide %>%
filter(shrub_native_nonsclero > 0.01) %>%
filter(site == "1" | site == "2"),
aes(x = grass_nonnative_NA*100,
y = shrub_native_nonsclero*100)) +
geom_point(aes(color = site), size = 3) +
scale_color_manual(values = c("blue", "blue", "maroon", "maroon", "maroon", "maroon", "maroon")) +
geom_smooth(method = "lm", se = TRUE, color = "gray50", linetype = "solid") + # se = confidence interval
labs(
x = "Non-native grass cover (%)",
y = "Non-scl shrub cover (%)",
title = "Linear regression of  non-scl shrub cover by non-native grass cover"
) +
scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) + # Set x-axis limits and breaks
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) + # Set y-axis limits and breaks
theme_bw()
# Fit the linear model
model.s <- lm(shrub_native_nonsclero ~ grass_nonnative_NA, # response variable ~ independent variable
data = cover_byleaftype_wide %>%
filter(shrub_native_nonsclero > 0.01) %>%
filter(site == "1" | site == "2")
)
# Print the summary of the model
model.s_summary <- summary(model.s)
# Extract the R^2 value
r_squared <- round(model.s_summary$r.squared, 3)
print(paste("Multiple R^2:", r_squared))
# [1] "Multiple R^2: 0.327" <-- all sites
# [1] "Multiple R^2: 0.684" <-- sites 1 and 2
# broken code
# ggplot(data = cover_byleaftype_wide) +
#
#   geom_point(aes(x = nonnative_grass_NA * 100, y = native_shrub_nonsclero * 100, color = "Native Shrub Nonsclero"), size = 4, show.legend = TRUE) +
#   geom_smooth(aes(x = nonnative_grass_NA * 100, y = native_shrub_nonsclero * 100, color = "Native Shrub Nonsclero"),
#               method = "lm", se = TRUE, linetype = "solid", show.legend = TRUE) +
#
#   geom_point(aes(x = nonnative_grass_NA * 100, y = native_shrub_sclerophyllous * 100, color = "Native Shrub Sclero"), size = 4,  show.legend = TRUE) +
#   geom_smooth(aes(x = nonnative_grass_NA * 100, y = native_shrub_sclerophyllous * 100, color = "Native Shrub Sclero"),
#               method = "lm", se = TRUE, linetype = "dashed", show.legend = TRUE) +
#   labs(
#     x = "Percent cover non-native grass (%)",
#     y = "Percent cover native Shrub (%)",
#     title = "Comparison of Native Shrub percent cover by Nonnative Grass percent cover",
#     color = "Legend"
#     ) +
#   scale_color_manual(values = c("Native Shrub Nonsclero" = "blue", "Native Shrub Sclero" = "red"),
#                      labels = c("Non-sclerophyllous", "Sclerophyllous")) +
#   xlim(0, 100) +
#   ylim(0, 100) +
#   theme_bw()
#only six transects had schlero shrubs present: INT 1-5, Site1 transect 4
#cover_byleaftype_wide %>% filter(native_shrub_sclerophyllous > 0) %>% group_by(site_rep, year) %>%  summarize(native_shrub_sclerophyllous = native_shrub_sclerophyllous)
# model.nonscl <- lm(native_shrub_nonsclero ~ nonnative_grass_NA, data = cover_byleaftype_wide)
# model.nonscl_summary <- summary(model.nonscl)
# r_squared <- round(model.nonscl_summary$r.squared, 3)
# print(paste("Multiple R^2:", r_squared))
#
# model.scl <- lm(native_shrub_sclerophyllous ~ nonnative_grass_NA, data = cover_byleaftype_wide)
# model.scl_summary <- summary(model.scl)
# r_squared <- round(model.scl_summary$r.squared, 3)
# print(paste("Multiple R^2:", r_squared))
############ non-native slope
# Fit the linear model
model.nnf <- lm(forb_nonnative ~ grass_nonnative, data = cover_bylfstatus_wide) # response variable ~ independent variable
# Print the summary of the model
model.nnf_summary <- summary(model.nnf)
# Extract the intercept, slope, and R^2 values
interceptnnf <- round(coef(model.nnf)[1], 2)
slopennf <- round(coef(model.nnf)[2], 2)
r_squarednnf <- round(model.nnf_summary$r.squared, 3)
print(paste("Multiple R^2:", r_squarednnf))
# [1] "Multiple R^2: 0.097"
# Create the label for the equation and R^2
eq_label_nnf <- paste0("Non-native forb: y = ", slopennf, "x + ", interceptnnf, "\n", "R² = ", r_squarednnf)
######### native forb slope
# Fit the linear model
model.nf <- lm(forb_native ~ grass_nonnative, data = cover_bylfstatus_wide) # response variable ~ independent variable
model.nf_summary <- summary(model.nf)
# Extract the intercept, slope, and R^2 values
interceptnf <- round(coef(model.nf)[1], 2)
slopenf <- round(coef(model.nf)[2], 2)
r_squarednf <- round(model.nf_summary$r.squared, 3)
print(paste("Multiple R^2:", r_squarednf))
# [1] "Multiple R^2: 0.01"
# Create the label for the equation and R^2
eq_label_nf <- paste0("Native forb: y = ", slopenf, "x + ", interceptnf, "\n", "R² = ", r_squarednf)
fig.1c <- ggplot(data = cover_bylfstatus_wide) + #%>%  filter(forb_native > 0.01 | forb_nonnative > 0.01 | forb_unknown > 0.01)) +
geom_point(aes(x = grass_nonnative * 100, y = forb_native * 100, color = "forb_native"), show.legend = TRUE) +
geom_smooth(aes(x = grass_nonnative * 100, y = forb_native * 100, color = "forb_native"),
method = "lm", se = TRUE, linetype = "solid", show.legend = TRUE) +
geom_point(aes(x = grass_nonnative * 100, y = forb_nonnative * 100, color = "forb_nonnative"), show.legend = TRUE) +
geom_smooth(aes(x = grass_nonnative * 100, y = forb_nonnative * 100, color = "forb_nonnative"),
method = "lm", se = TRUE, linetype = "dashed", show.legend = TRUE) +
labs(
# title = "Comparison of native and non-native forb percent cover by Nonnative Grass percent cover",
color = "Status",
x = "Non-native grass cvoer (%)",
y = "Forb cover (%)"
) +
scale_color_manual(values = c("forb_native" = "blue", "forb_nonnative" = "red"),
labels = c("Native ", "Non-native")) +
xlim(0, 100) +
ylim(0, 100) +
theme_bw() +
annotate("text", x = 0, y = 95, label = eq_label_nnf, color = "black", size = 4, hjust = 0) +
annotate("text", x = 0, y = 80
, label = eq_label_nf, color = "black", size = 4, hjust = 0)
fig.1c
# Fit the linear model
model.g <- lm(grass_native ~ grass_nonnative, data = cover_bylfstatus_wide %>%  filter(grass_native >0)) # response variable ~ independent variable
model.g_summary <- summary(model.g)
# Extract the intercept, slope, and R^2 values
interceptg <- round(coef(model.g)[1], 2)
slopeg <- round(coef(model.g)[2], 2)
r_squaredg <- round(model.g_summary$r.squared, 3)
print(paste("Multiple R^2:", r_squaredg))
# [1] "Multiple R^2: 0.497"
# Create the label for the equation and R^2
eq_label_g <- paste0("y = ", slopeg, "x + ", interceptg, "\n", "R² = ", r_squaredg)
fig.1e <- ggplot(data = cover_bylfstatus_wide %>%
filter(grass_native >0)) +
geom_point(aes(x = grass_nonnative * 100, y = grass_native * 100, color = "grass_native"), show.legend = TRUE) +
geom_smooth(aes(x = grass_nonnative * 100, y = grass_native * 100, color = "grass_native"),
method = "lm", se = TRUE, linetype = "solid", show.legend = TRUE) +
labs(
x = "Non-native grass cover (%)",
y = "Native grass cover (%)",
#title = "Comparison of Native grass percent cover by Nonnative Grass percent cover",
color = "Legend"
) +
scale_color_manual(values = c("grass_native" = "blue"),
labels = c("Native ", "Non-native")) +
xlim(0, 100) +
ylim(0, 100) +
theme_bw() +
annotate("text", x = 0, y = 95, label = eq_label_g, color = "black", size = 4, hjust = 0)
#14 transecrs have native grass present - mostly at Site 1 and at INT transects
#cover_bylfstatus_wide %>% filter(grass_native > 0) %>% group_by(site_rep, year) %>%  summarize(native_grass = grass_native)
fig.1e
########### Save the plot to a PDF file with specified size
#   pdf("fig.cover_regression.pdf", width = 8, height = 10)  # 8x10 inches (portrait size)
# Add labels to the plots using cowplot's draw_label() function
fig.1a_labeled <- ggdraw(fig.1a) + draw_label("A", x = 0.85, y = 0.92, size = 15)  # Add letter "A" in the top-right corner
fig.1b_labeled <- ggdraw(fig.1b) + draw_label("D", x = 0.85, y = 0.92, size = 15)
fig.1c_labeled <- ggdraw(fig.1c) + draw_label("B", x = 0.85, y = 0.92, size = 15)  # Add letter "B"
fig.1d_labeled <- ggdraw(fig.1d) + draw_label("E", x = 0.85, y = 0.92, size = 15)  # Add letter "C"
fig.1e_labeled <- ggdraw(fig.1e) + draw_label("C", x = 0.85, y = 0.92, size = 15)  # Add letter "D"
fig.1f_labeled <- ggdraw(fig.1f) + draw_label("F", x = 0.85, y = 0.92, size = 15)  # Add letter "E"
# Combine the plots in a 2x3 layout
grid.arrange(fig.1b_labeled, fig.1a_labeled,
fig.1d_labeled, fig.1c_labeled,
fig.1f_labeled, fig.1e_labeled,
nrow = 3,
ncol = 2,
widths = c(1, 1), # Custom widths for each column
heights = c(1, 1, 1) # Custom heights for each row
)
# dev.off()  # Close the PDF device
# making a figure of mean forb x annual/perennial cover by cluster group
cover_bylifecycle <- abcover_omitground %>%
dplyr::select(!c(site_rep, site_rep_dist)) %>%
mutate(transect = case_when(transect == "1" ~ "01", # oldname ~ newname
transect == "2" ~ "02",
transect == "3" ~ "03",
transect == "4" ~ "04",
transect == "5" ~ "05",
transect == "6" ~ "06",
transect == "7" ~ "07",
transect == "8" ~ "08",
transect == "9" ~ "09",
TRUE ~ transect)) %>%
mutate(site_rep = paste(site, transect, sep = ".")) %>%
mutate(site_rep = case_when(site_rep == "INT1.01" ~ "INT1.1",
site_rep == "INT2.01" ~ "INT2.1",
site_rep == "INT3.01" ~ "INT3.1",
site_rep == "INT4.01" ~ "INT4.1",
site_rep == "INT5.01" ~ "INT5.1",
TRUE ~ site_rep)) %>%
left_join(groups, by = "site_rep") %>%
mutate(site_rep_dist = paste(site_rep, distance, sep = "_")) %>%
mutate(lifeform_lifecycle = paste(lifeform, lifecycle, sep = "_")) %>%
mutate(lifeform_lifecycle_status = paste(lifeform_lifecycle, status, sep = "_")) %>%
group_by(year, site, transect, site_rep, lifeform, lifecycle, status, lifeform_lifecycle, lifeform_lifecycle_status, cluster) %>%
dplyr::summarize(
lifeform_lifecycle_count_per_transect = n_distinct(site_rep_dist),
lifeform_lifecycle_percentcover = (n_distinct(site_rep_dist)/41)*100 # <-- calculate percent cover by transect, lifeform, and lifecycle
) %>%
ungroup() %>%
mutate(cluster = factor(cluster, levels = c(5, 4, 2, 3, 1))) %>%
mutate(lifeform = factor(lifeform, levels = c("shrub", "forb", "grass")))
# mutate(cluster = case_when(cluster == "1" ~ "NNG",
#                             cluster == "2" ~ "ssF",
#                             cluster == "3" ~ "ssG",
#                             cluster == "4" ~ "ssFG",
#                             cluster == "5" ~ "EVG",
#                             TRUE ~ cluster)) %>%
# mutate(cluster = factor(cluster, levels = c("NNG", "ssG", "ssF", "ssFG", "EVG")))
cover_bylifecycle_bygroup <- cover_bylifecycle %>%
group_by(cluster, lifeform, lifecycle, status, lifeform_lifecycle, lifeform_lifecycle_status) %>%
dplyr::summarise(
mean_cover = mean(lifeform_lifecycle_percentcover, na.rm = TRUE),
n = n_distinct(site_rep),
sd = sd(lifeform_lifecycle_percentcover, na.rm = TRUE),
se = sd / sqrt(n)
)
############################## figures of lifeform_lifecycle by cluster group
# # Split lifeform_lifecycle into two separate columns: lifeform and lifecycle
# cover_bylifecycle_bygroup <- cover_bylifecycle_bygroup %>%
#   separate(lifeform_lifecycle, into = c("lifeform", "lifecycle"), sep = "_")
fig_forbgrass <- ggplot(cover_bylifecycle_bygroup %>%
filter(lifeform_lifecycle_status %in% c(
"forb_annual_native", "forb_annual_nonnative", "forb_perennial_native",
"grass_annual_nonnative", "grass_perennial_native",
"shrub_perennial_native")),
aes(x = cluster,
y = mean_cover,
shape = status,
color = lifecycle
)) +
geom_point(size = 3, position = position_dodge(width = 0.3)) +  # Mean points
geom_errorbar(aes(ymin = mean_cover - se, ymax = mean_cover + se),
width = 0.5, position = position_dodge(width = 0.3)) +  # SE bars
labs(x = "Plant Cluster",
y = "Mean Percent Cover (%)",
color = "Lifecycle",  # Label for color legend
shape = "Status") +  # Label for shape legend
theme_bw() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1),  # Rotate x-axis labels if needed
legend.position = "right"
) +
ylim(0, 100) +
facet_wrap(~lifeform) +  # Facet by lifeform
scale_shape_manual(values = c("native" = 16, "nonnative" = 2)) +
scale_color_manual(values = c("annual" = "orange", "perennial" = "darkgreen")) +
scale_x_discrete(labels = c("1" = "NNG", "2" = "ssF", "3" = "ssG", "4" = "ssFG", "5" = "EVG"))  # Relabel clusters
fig_forbgrass
############################## stats among groups
### SHRUB COVER by CLUSTER
hist((cover_bylifecycle %>% filter(lifeform=="shrub"))$lifeform_lifecycle_percentcover)
shapiro.test((cover_bylifecycle %>% filter(lifeform=="shrub"))$lifeform_lifecycle_percentcover)
# data:  shrub_perennial_data$lifeform_lifecycle_percentcover
# W = 0.94181, p-value = 0.06355 <-- normal
aov_shrub <- aov(lifeform_lifecycle_percentcover ~ cluster, data = (cover_bylifecycle %>% filter(lifeform=="shrub")))
summary(aov_shrub)
# Df Sum Sq Mean Sq F value   Pr(>F)
# cluster      4  14974    3743   14.48 1.08e-06 ***
# Residuals   30   7755     258
tukey_result <- TukeyHSD(aov_shrub, conf.level=.95)
# $cluster
#         diff        lwr      upr     p adj
# 3-1 14.54704  -9.588734 38.68281 0.4212663
# 2-1 35.45296  11.317190 59.58873 0.0016217 <- 2, 4, 5 are sig from 1
# 4-1 45.73171  22.414336 69.04908 0.0000312 <-
# 5-1 58.17073  31.584838 84.75663 0.0000050 <-
# 2-3 20.90592  -4.021395 45.83324 0.1342625
# 4-3 31.18467   7.048897 55.32044 0.0063246 <- 4 and 5 are sig from 3
# 5-3 43.62369  16.317185 70.93020 0.0005853 <-
# 4-2 10.27875 -13.857026 34.41452 0.7312299
# 5-2 22.71777  -4.588739 50.02428 0.1394591
# 5-4 12.43902 -14.146869 39.02492 0.6586902
tukey_df <- as.data.frame(tukey_result$cluster)
tukey_df$comparison <- rownames(tukey_df)
# Split the comparison names into separate columns for cluster1 and cluster2
tukey_df <- tukey_df %>%
mutate(cluster1 = as.numeric(sub("-.*", "", comparison)),
cluster2 = as.numeric(sub(".*-", "", comparison)))
# Create a matrix 5 x 5
comparison_matrix <- matrix(NA, nrow = 5, ncol = 5)
rownames(comparison_matrix) <- 1:5  # Cluster numbers
colnames(comparison_matrix) <- 1:5
# Fill the matrix with the adjusted p-values from the Tukey test
for (i in 1:nrow(tukey_df)) {
comparison_matrix[as.character(tukey_df$cluster1[i]), as.character(tukey_df$cluster2[i])] <- tukey_df$`p adj`[i]
comparison_matrix[as.character(tukey_df$cluster2[i]), as.character(tukey_df$cluster1[i])] <- tukey_df$`p adj`[i]  # Ensure symmetry
}
# Set diagonal to 1 (self-comparisons are not relevant)
diag(comparison_matrix) <- 1
# Apply multcompLetters to assign significance letters
significance_letters <- multcompLetters(comparison_matrix, compare = "<", threshold = 0.05)$Letters
significance_letters <- significance_letters %>%
as.tibble() %>%
rownames_to_column("cluster")
# Now you can add the significance letters to your clusters in the data frame:
shrub_perennial_data <- (cover_bylifecycle %>% filter(lifeform=="shrub")) %>%
left_join(significance_letters, by = "cluster") %>%
mutate(cluster = factor(cluster, levels = c(5, 4, 2, 3, 1)))
# # Recalculate the significance letters after the reordering
# significance_letters <- multcompLetters(comparison_matrix, compare = "<", threshold = 0.05)$Letters
# Apply the significance letters to the reordered clusters
# shrub_perennial_data <- shrub_perennial_data %>%
#   mutate(significance = significance_letters[as.factor(cluster)])
cluster_shrub_boxorjitter <- ggplot(shrub_perennial_data,
aes(x = cluster,
y = lifeform_lifecycle_percentcover)) +
geom_boxplot() + # boxplot
geom_jitter(width = 0.2, height = 0.1, color = "darkgreen") + # jitter
geom_text(aes(label = value, y = max(lifeform_lifecycle_percentcover) + 5), vjust = 0.5) +
labs(x = "Plant Cluster",
y = "Percent Shrub Cover (%)") +
scale_x_discrete(labels = c("1" = "NNG", "2" = "ssF", "3" = "ssG", "4" = "ssFG", "5" = "EVG")) +  # Relabel clusters
theme_bw()
cluster_shrub_boxorjitter
shrub_cluster <- ggplot(cover_bylifecycle_bygroup %>%
filter(lifeform_lifecycle %in% c("shrub_perennial")),
aes(x = cluster,
y = mean_cover,
shape = lifeform,   # Shape by lifeform
color = lifecycle   # Color by lifecycle
)) +
geom_point(size = 3, position = position_dodge(width = 0.3)) +  # Mean points
geom_errorbar(aes(ymin = mean_cover - se, ymax = mean_cover + se),
width = 0.2, position = position_dodge(width = 0.3)) +  # SE bars
labs(x = "Plant Cluster",
y = "Mean Percent Cover (%)",
color = "Lifecycle",  # Label for color legend
shape = "Lifeform") +  # Label for shape legend
theme_bw() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1),  # Rotate x-axis labels if needed
legend.position = "right"
) +
ylim(0, 100) +
# facet_wrap(~lifeform) +  # Facet by lifeform
scale_shape_manual(values = c("shrub" = 16)) +
scale_color_manual(values = c("perennial" = "black")) +
scale_x_discrete(labels = c("1" = "NNG", "2" = "ssF", "3" = "ssG", "4" = "ssFG", "5" = "EVG"))  # Relabel clusters
### GRASS cover by CLUSTER
grass_annual_data <- cover_bylifecycle %>%
filter(lifeform_lifecycle == "grass_annual") # all grass_annual are nonnative
hist(grass_annual_data$lifeform_lifecycle_percentcover)
shapiro.test(grass_annual_data$lifeform_lifecycle_percentcover)
# data:  grass_annual_data$lifeform_lifecycle_percentcover
# W = 0.90111, p-value = 0.002374 <-- not normal
# Pairwise Wilcoxon test with significance letters
significance_results <- grass_annual_data %>%
pairwise_wilcox_test(
lifeform_lifecycle_percentcover ~ cluster,
p.adjust.method = "bonferroni"  # Adjust method of your choice # BH
) %>%
rstatix::add_xy_position(x = "cluster")  # Adds x-position for plotting
# Add significance letters
letters <-  significance_results %>%
rstatix::get_comparisons(p.adj.signif) #%>%
mutate(label = rstatix::get_significance_letters(significance_results$p.adj))  # Generates a, b, etc.
### GRASS cover by CLUSTER
grass_annual_data <- cover_bylifecycle %>%
filter(lifeform_lifecycle == "grass_annual") # all grass_annual are nonnative
hist(grass_annual_data$lifeform_lifecycle_percentcover)
shapiro.test(grass_annual_data$lifeform_lifecycle_percentcover)
# Pairwise Wilcoxon test with significance letters
significance_results <- grass_annual_data %>%
pairwise_wilcox_test(
lifeform_lifecycle_percentcover ~ cluster,
p.adjust.method = "bonferroni"  # Adjust method of your choice # BH
) %>%
rstatix::add_xy_position(x = "cluster")  # Adds x-position for plotting
# Add significance letters
letters <-  significance_results %>%
rstatix::get_comparisons(p.adj.signif) #%>%
mutate(label = rstatix::get_significance_letters(significance_results$p.adj))  # Generates a, b, etc.
# Add significance letters
letters <-  significance_results %>%
rstatix::get_comparisons(p.adj.signif) %>%
mutate(label = rstatix::get_significance_letters(significance_results$p.adj))  # Generates a, b, etc.
# Pairwise Wilcoxon test with significance letters
significance_results <- grass_annual_data %>%
pairwise_wilcox_test(
lifeform_lifecycle_percentcover ~ cluster,
p.adjust.method = "bonferroni"  # Adjust method of your choice # BH
) %>%
rstatix::add_xy_position(x = "cluster")  # Adds x-position for plotting
# Add significance letters
letters <-  significance_results %>%
rstatix::get_comparisons(p.adj.signif) %>%
mutate(label = rstatix::get_significance_letters(significance_results$p.adj))  # Generates a, b, etc.
# Add significance letters
letters <-  significance_results %>%
rstatix::get_comparisons(p.adj.signif) #%>%
letters
ggplot(grass_annual_data,
aes(x = cluster,
y = lifeform_lifecycle_percentcover)) +
geom_boxplot() +  # Boxplot
geom_jitter(width = 0.2, height = 0.1, color = "orange") +  # Jittered points
# Add significance letters
geom_text(data = letters, aes(x = as.numeric(group1), y = max(df$mean_percentcover) + 5, label = label),
vjust = 0.5) +
labs(x = "Plant Cluster", y = "Non-Native Annual Grass Cover (%)") +
scale_x_discrete(labels = c("1" = "NNG", "2" = "ssF", "3" = "ssG", "4" = "ssFG", "5" = "EVG")) +  # Relabel clusters
theme_bw()
significance_results
view(significance_results)
view(letters)
ggplot(grass_annual_data,
aes(x = cluster,
y = lifeform_lifecycle_percentcover)) +
geom_boxplot() +  # Boxplot
geom_jitter(width = 0.2, height = 0.1, color = "orange") +  # Jittered points
# Add significance letters
geom_text(data = letters, aes(x = as.numeric(group1), y = max(df$mean_percentcover) + 5, label = label),
vjust = 0.5) +
labs(x = "Plant Cluster", y = "Non-Native Annual Grass Cover (%)") +
scale_x_discrete(labels = c("1" = "NNG", "2" = "ssF", "3" = "ssG", "4" = "ssFG", "5" = "EVG")) +  # Relabel clusters
theme_bw()
# Pairwise Wilcoxon test with significance letters
significance_results <- grass_annual_data %>%
pairwise_wilcox_test(
lifeform_lifecycle_percentcover ~ cluster,
p.adjust.method = "bonferroni"  # Adjust method of your choice # BH
) %>%
rstatix::add_xy_position(x = "cluster")  # Adds x-position for plotting
# Generate compact letter display for significance
significance_letters <- significance_results %>%
rstatix::get_comparisons() %>%
rstatix::add_significance_letters(method = "compact")  # Automatically generates letters
ggplot(grass_annual_data, aes(x = factor(cluster), y = lifeform_lifecycle_percentcover)) +
geom_boxplot() +
geom_jitter(width = 0.2, height = 0.1, color = "darkgreen") +
# Adding pairwise significance with p-values or significance levels
stat_pvalue_manual(significance_results, label = "p.adj.signif", y.position = max(grass_annual_data$lifeform_lifecycle_percentcover) + 5) +
labs(x = "Plant Cluster", y = "Non-Native Annual Grass Cover (%)") +
scale_x_discrete(labels = c("1" = "NNG", "2" = "ssF", "3" = "ssG", "4" = "ssFG", "5" = "EVG")) +
theme_bw()
print(significance_results)
ggplot(grass_annual_data, aes(x = factor(cluster), y = lifeform_lifecycle_percentcover)) +
geom_boxplot() +
geom_jitter(width = 0.2, height = 0.1, color = "darkgreen") +
# Add significance annotations
stat_pvalue_manual(significance_results, label = "p.adj.signif", y.position = "y.position") +
labs(x = "Plant Cluster", y = "Non-Native Annual Grass Cover (%)") +
scale_x_discrete(labels = c("1" = "NNG", "2" = "ssF", "3" = "ssG", "4" = "ssFG", "5" = "EVG")) +
theme_bw()
# Pairwise Wilcoxon test with significance letters
significance_results <- grass_annual_data %>%
pairwise_wilcox_test(
lifeform_lifecycle_percentcover ~ cluster,
p.adjust.method = "bonferroni"  # Adjust method of your choice # BH
) %>%
rstatix::add_xy_position(x = "cluster")  # Adds x-position for plotting
# Generate compact letter display for significance
significance_letters <- significance_results %>%
rstatix::get_comparisons() %>%
rstatix::add_significance_letters(method = "compact")  # Automatically generates letters
view(significance_results)
# Generate compact letter display for significance
significance_letters <- significance_results %>%
rstatix::get_comparisons() #%>%
# Generate compact letter display for significance
significance_letters <- significance_results %>%
rstatix::get_comparisons() %>%
rstatix::add_significance(method = "compact")  # Automatically generates letters
# Generate compact letter display for significance
significance_letters <- significance_results %>%
rstatix::get_comparisons() %>%
rstatix::add_significance(method = compact)  # Automatically generates letters
# Pairwise Wilcoxon test with significance letters
significance_results <- grass_annual_data %>%
pairwise_wilcox_test(
lifeform_lifecycle_percentcover ~ cluster,
p.adjust.method = "bonferroni"  # Adjust method of your choice # BH
) %>%
rstatix::add_xy_position(x = "cluster")  # Adds x-position for plotting
# Generate compact letter display for significance
significance_letters <- significance_results %>%
rstatix::get_comparisons() %>%
rstatix::add_significance()  # Automatically generates letters
significance_letters <- significance_results %>%
rstatix::get_comparisons()
# Generate compact letter display for significance
significance_letters <- significance_results %>%
rstatix::get_comparisons() %>%
rstatix::add_significance(method = compact)  # Automatically generates letters
