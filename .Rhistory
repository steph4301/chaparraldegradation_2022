# data:  abcover_vegcover_long$percentcover
# W = 0.67222, p-value = 6.305e-07 <-- not normally distributed...
abcover_vegcover_long$site_rep <- paste(abcover_vegcover_long$site, abcover_vegcover_long$rep, sep="_") # combine site and rep form to one column
# total veg cover only
abcover_vegcover_long_vegonly <- abcover_vegcover_long %>%
filter(covertype == "percentcover_veg")
#testing for normality of veg cover only
shapiro.test(abcover_vegcover_long_vegonly$percentcover)
# 	Shapiro-Wilk normality test
#
# data:  abcover_vegcover_long_vegonly$percentcover
# W = 0.73103, p-value = 0.0005447 <-- not normally distributed
ggqqplot(abcover_vegcover_long_vegonly$percentcover)
abcover_vegcover_long_vegonly$site_rep <- paste(abcover_vegcover_long_vegonly$site, abcover_vegcover_long_vegonly$rep, sep="_") # combine site and rep form to one column
# code from --> http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r
kruskal.test(percentcover ~ standtype, data = abcover_vegcover_long_vegonly)
# 	Kruskal-Wallis rank sum test
#
# data:  percentcover by standtype
# Kruskal-Wallis chi-squared = 3.0521, df = 2, p-value = 0.2174 <-- not significantly different
pairwise.wilcox.test(abcover_vegcover_long_vegonly$percentcover, abcover_vegcover_long_vegonly$standtype,
p.adjust.method = "BH")
#          intact matrix
# matrix   0.78   -
# degraded 0.32   0.32  <-- nothing is significant
# min / max percent cover of veg only
min(abcover_vegcover_long_vegonly$percentcover)*100
max(abcover_vegcover_long_vegonly$percentcover)*100
# mean SD by stand type
abcover_vegcover_meanSD <- abcover_vegcover_long_vegonly %>%
group_by(standtype) %>% # by site
summarize(mean_cover = mean(percentcover),
n = length((percentcover)),
sd = sd(percentcover),
se = ((sd(percentcover))/sqrt(length((percentcover)))))
print(abcover_vegcover_meanSD)
# standtype mean_cover  n   sd            se
# intact	  0.9674797   3	  0.028163428	  0.016260163
# matrix	  0.9756098	  6	  0.030851489	  0.012595068
# degraded	0.9959350	  6	  0.009957275	  0.004065041
# combine standtype and native/nonnative status to one column
abcover_vegcover$site_rep <- paste(abcover_vegcover$site, abcover_vegcover$rep, sep="_")
#  column plot - by site_rep
abcover_vegcover_plot_2 <- ggplot(abcover_vegcover, aes(x = site_rep, y = percentcover_veg, fill = standtype)) +
geom_col(position = "dodge", width = 0.8) +
labs(
title = "Total Vegetation Cover",
x = "Site",
y = "Percent Vegetation Cover (%)") + # title, axes titles
scale_fill_manual(values = c(standcolors)) + # manual colors
# scale_fill_manual(values = cal_palette('chaparral2')) +  # continuous colors
#                  limits = c("intact", "matrix", "degraded"), # "limits" reorders the x-axis
#                  labels = c("Intact", "Matrix", "Degraded")) + # "labels" changes the name
theme_bw() #+
# scale_x_discrete(
#   limits=c("intact", "matrix", "degraded"),
#   labels=c("intact" = "Intact", "matrix" = "Matrix", "degraded" = "Degraded")
#   )
abcover_vegcover_plot_2
#  column plot - by SITE
abcover_vegcover_plot <- ggplot(abcover_vegcover_meanSD, aes(x = standtype, y = mean_cover, fill = standtype)) +
geom_col(position = "dodge", width = 0.8) +
geom_errorbar(
aes(ymin = mean_cover-se, ymax=mean_cover+se), # mean +- SE
width=.2, position=position_dodge(.9)) +
labs(
title = "Percent Canopy Cover",
x = "Site",
y = "Average Percent Canopy Cover (%)") + # title, axes titles
scale_fill_manual(values = c(standcolors)) + # manual colors
# scale_fill_manual(values = cal_palette('chaparral2')) +  # continuous colors
#                  limits = c("intact", "matrix", "degraded"), # "limits" reorders the x-axis
#                  labels = c("Intact", "Matrix", "Degraded")) + # "labels" changes the name
theme_bw() #+
# scale_x_discrete(
#   limits=c("intact", "matrix", "degraded"),
#   labels=c("intact" = "Intact", "matrix" = "Matrix", "degraded" = "Degraded")
#   )
abcover_vegcover_plot
# line 933 from Ch1_Degradation_original.Rmd
# data prep
abcover_bylf_bystatus <- abcover_full_v_omitground %>%
group_by(standtype, lifeform, status, site, rep, site_rep) %>%
dplyr::summarize(
count_per_transect = n_distinct(site_rep_dist),
percentcover = n_distinct(site_rep_dist)/41 # <-- calculate percent cover by transect, lifeform, and status
)
view(abcover_bylf_bystatus) # prints to new tab
# visualizing data
## histogram
hist(abcover_bylf_bystatus$percentcover)
## jitter - by site_rep
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = site_rep, color = lifeform)) +
geom_jitter()
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = lifeform, color = standtype)) +
geom_jitter()
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, color = status)) +
geom_jitter()
## boxplot
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, fill = lifeform)) +
geom_boxplot() # boxplots
## jitter - by standtype
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, color = lifeform)) +
geom_jitter()
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, color = status)) +
geom_jitter()
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, color = status)) +
geom_point()
## boxplot
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, fill = lifeform)) +
geom_boxplot() # boxplots
# NATIVE and NON-NATIVE
# testing for normality by status
shapiro.test(abcover_bylf_bystatus$percentcover)
#W = 0.90228, p-12838.200536385179 value = 0.0001246 <-- not normally distributed
# NATIVE ONLY
abcover_bylf_bystatus_native <- abcover_bylf_bystatus %>%   # NATIVE ONLY
filter(status =="native")
shapiro.test(abcover_bylf_bystatus_native$percentcover)
# 	Shapiro-Wilk normality test
#
# data:  abcover_bylf_bystatus_native$percentcover
# W = 0.89092, p-value = 0.002663 <-- not normally distributed
kruskal.test(percentcover ~ standtype, data = abcover_bylf_bystatus_native)
# Kruskal-Wallis rank sum test
#
# data:  percentcover by standtype
# Kruskal-Wallis chi-squared = 4.1338, df = 2, p-value = 0.1266 <-- not sig different
pairwise.wilcox.test(abcover_bylf_bystatus_native$percentcover, abcover_bylf_bystatus_native$standtype,
p.adjust.method = "BH")
# data:  abcover_bylf_bystatus_native$percentcover and abcover_bylf_bystatus_native$standtype
#
#          intact matrix
# matrix   0.26   -
# degraded 0.20   0.26  <-- no significant differences
#
# P value adjustment method: BH
#
# --- ERROR MESSAGE ---
# Warning: cannot compute exact p-value with ties
#
# From CHATGPT: The warning message you are seeing, "Warning: cannot compute exact p-value with ties," occurs when you are performing a statistical test that relies on exact p-values, such as the Mann-Whitney U test or the Kruskal-Wallis test, and there are tied values in your data. Tied values mean that there are two or more identical values in your dataset.
# When ties occur, the exact ranks of these tied values cannot be determined, leading to potential inaccuracies in the p-value calculation. Some statistical tests require exact ranks to compute p-values, so when ties are present, the software might issue a warning indicating that the p-value might not be exact.
# NON-NATVE
abcover_bylf_bystatus_nonnative <- abcover_bylf_bystatus %>%  # NON-NATIVE ONLY
filter(status == "nonnative")
shapiro.test(abcover_bylf_bystatus_nonnative$percentcover)
# 	Shapiro-Wilk normality test
#
# data:  abcover_bylf_bystatus_nonnative$percentcover
# W = 0.9056, p-value = 0.01551  <-- not normally distributed
kruskal.test(percentcover ~ standtype, data = abcover_bylf_bystatus_nonnative)
# Kruskal-Wallis rank sum test
#
# data:  percentcover by standtype
# Kruskal-Wallis chi-squared = 11.254, df = 2, p-value = 0.0036 <-- significantly different
pairwise.wilcox.test(abcover_bylf_bystatus_nonnative$percentcover, abcover_bylf_bystatus_nonnative$standtype,
p.adjust.method = "BH")
#          intact matrix
# matrix   0.078  -
# degraded 0.013  0.039 <-- significantly different
abcover_nativecover <- abcover_full_v %>%
na.omit() %>%
filter(status == "native") %>%
group_by(standtype, site_rep) %>%
dplyr::summarize(count_per_transect = length(unique(distance)),
percentcover_native = length(unique(distance))/41
)
view(abcover_nativecover)
cover_statuslf_matrix <- read.csv("percentcover_bystatus_bylifeform_matrix.csv", header = TRUE) %>%
mutate(lifeform = case_when(lifeform == "herb" ~ "forb",
TRUE ~ lifeform))
cover_statuslf_matrix <- cover_statuslf_matrix %>%
mutate(standtype = fct_relevel(standtype,
"intact", "matrix", "degraded"))
#from chunk: SHRUB scatterplot
cover_statuslf_matrix$status_lifeform <- paste(cover_statuslf_matrix$status, cover_statuslf_matrix$lifeform, sep="_") # combine status and life form to one column
cover_statuslf_matrix_long <- cover_statuslf_matrix %>%
dplyr::select(standtype, site_rep, percentcover, status_lifeform)
view(cover_statuslf_matrix_long)
cover_statuslf_matrix_wide1 <- cover_statuslf_matrix_long %>%
spread(status_lifeform, percentcover)
view(cover_statuslf_matrix_wide1)
abcover_nativecover_nngrasscover <- left_join(abcover_nativecover, cover_statuslf_matrix_wide1, by = "site_rep")
view(abcover_nativecover_nngrasscover)
formula6 <- abcover_nativecover_nngrasscover$percentcover_native ~ abcover_nativecover_nngrasscover$nonnative_grass
native_by_nngrass_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = nonnative_grass*100, y = percentcover_native*100, shape = standtype.x, color = standtype.x)) + #shape = standtype.x, color = standtype.x
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#  geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Native cover (%)",
title = "Total Native Cover by Non-native Grass Cover") +
theme_bw() +
stat_poly_line() +
#  stat_poly_eq(use_label(c("eq", "R2")))
stat_poly_eq(
aes(label = paste(after_stat(eq.label), stat(adj.rr.label), sep = "~~~~")),
formula = formula6,
parse=TRUE
)
print(native_by_nngrass_regression)
#write.csv(abcover_nativecover_nngrasscover,"processed/abcover_nativecover_nngrasscover.csv")
### SEGMENTED ###
p <- ggplot(abcover_nativecover_nngrasscover, aes(x = nonnative_grass, y = percentcover_native)) + geom_line()+
geom_point()
p
#create a linear model <-- from https://rpubs.com/MarkusLoew/12164
my.lm <- lm(nonnative_grass ~ percentcover_native, data = abcover_nativecover_nngrasscover)
summary(my.lm)
# Extract the coefficients from the overall model
my.coef <- coef(my.lm)
# add the regression line to the graph
# setting the aesthetics to a constant - this provides a name that we can reference later when we add additional layers
p <- p + geom_abline(intercept = my.coef[1],
slope = my.coef[2],
aes(colour = "overall"))
p
# -------------------
# analyse breakpoints
# -------------------
# http://cran.r-project.org/doc/Rnews/Rnews_2008-1.pdf
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(my.lm,
seg.Z = ~ nonnative_grass,  # x-axis
# psi = .4, .7
psi = list(percentcover_native = c(.1219,.829, 0.3))
)
nncover_nativeshrub <- ggplot(data = abcover_nonnativecover_nngrasscover,
aes(x = native_shrub*100, y = percentcover_nonnative*100, shape = standtype.x, color = standtype.x)) + #shape = standtype.x, color = standtype.x
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Total non-native cover (%)",
title = "Total non-native cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
native_by_nativeshrub_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = native_shrub*100, y = percentcover_native*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Native cover (%)",
title = "Total Native Cover by Natie Shrub Cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(native_by_nativeshrub_regression)
nativeforb_by_nativeshrub_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = native_shrub*100, y = native_forb*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Native forb cover (%)",
title = "Native forb cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nativeforb_by_nativeshrub_regression)
nativeforb_by_nngrass_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = nonnative_grass*100, y = native_forb*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Native forb cover (%)",
title = "Native forb cover x non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nativeforb_by_nngrass_regression)
# NON-NATVE
abcover_bylf_bystatus_nonnative <- abcover_bylf_bystatus %>%  # NON-NATIVE ONLY
filter(status == "nonnative")
view(abcover_full_v)
abcover_nncover <- abcover_full_v %>%
na.omit() %>%
filter(status == "nonnative") %>%
group_by(standtype, site_rep) %>%
dplyr::summarize(count_per_transect = length(unique(distance)),
percentcover_nonnative = length(unique(distance))/41
)
view(abcover_nncover)
abcover_bystatus <- abcover_full_v %>%
left_join(abcover_nncover, by = 'standtype', 'site_rep')
abcover_bystatus <- abcover_full_v %>%
left_join(abcover_nncover, by = 'site_rep')
abcover_bystatus <- abcover_full_v %>%
left_join(abcover_nncover, by = 'site_rep')
view(abcover_bystatus)
abcover_bystatus <- abcover_nativecover %>%
left_join(abcover_nncover, by = 'site_rep')
abcover_bystatus <- abcover_nativecover %>%
left_join(abcover_nncover, by = 'standtype', 'site_rep')
abcover_bystatus <- abcover_nativecover %>%
left_join(abcover_nncover, by = 'site_rep')
view(abcover_bystatus)
view(abcover_bystatus)
view(cover_statuslf_matrix)
view(abcover_bystatus)
view(abcover_bystatus)
view(cover_statuslf_matrix_long)
view(abcover_bystatus)
# copy/paste data, edited in Excel, saved as csv in 2022b folder
abcover_bystatus_edited <- read.csv("abcover_bystatus.csv", header = TRUE, na.strings=c("","NA"))
print(abcover_bystatus_edited)
ggplot(abcover_bystatus_edited, aes(fill=standtype, y=percentcover, x=site_rep)) +
geom_bar(position="stack", stat="identity")
ggplot(abcover_bystatus_edited, aes(fill=standtype, y=percentcover, x=site_rep)) +
geom_bar(position="stack", stat="status")
ggplot(abcover_bystatus_edited, aes(fill=status, y=percentcover, x=site_rep)) +
geom_bar(position="stack", stat="identity")
ggplot(abcover_bystatus_edited, aes(fill=status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity")
ggplot(abcover_bystatus_edited, aes(fill=status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") %>%
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Total vegetaion percent cover by status")
ggplot(abcover_bystatus_edited, aes(fill=status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Total vegetaion percent cover by status")
ggplot(abcover_bystatus_edited, aes(fill=status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by status per Trasect")
ggplot(abcover_bystatus_edited, aes(fill=status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by vegetation status per Trasect")
ggplot(abcover_bystatus_edited, aes(fill=status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity", color = statuscolors) +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by vegetation status per Trasect")
ggplot(abcover_bystatus_edited, aes(color=status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by vegetation status per Trasect")
ggplot(abcover_bystatus_edited, aes(color="black", fill = statuscolors, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by vegetation status per Trasect")
ggplot(abcover_bystatus_edited, aes(color="black", fill = staus, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by vegetation status per Trasect")
view(abcover_bystatus_edited)
ggplot(abcover_bystatus_edited, aes(color="black", fill = status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by vegetation status per Trasect")
ggplot(abcover_bystatus_edited, aes(fill = status, y=percentcover*100, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x.bottom = element_text(angle = 90)) +
labs(x = "Transect ID",
y = "Percent cover (%)",
title = "Percent cover by vegetation status per Trasect")
view(abcover_vegcover_meanSD)
view(abcover_vegcover)
#1. Every variable is a column --> ARCA_dead
#2. Each observation is a row --> DEG_1
#3. Each cell contains a single value --> N
# native shrub density
shrubdensitylife_full <- read_csv("deg_beltdensity_bylifestage.csv",
col_types = cols(
StandType = col_character(),
Site = col_character(),
rep = col_character(),
ScientificName = col_character(),
dead = col_integer(),
immature = col_integer(),
mature = col_integer(),
resprout = col_integer(),
seedling = col_integer()
)
) %>%
rename(standtype = StandType,
site = Site,
species = ScientificName) %>%
mutate(standtype = case_when(standtype == "Grass" ~ "degraded",
standtype == "matrix" ~ "matrix",
standtype == "Intact" ~ "intact")) %>%
mutate(standtype = fct_relevel(standtype,
"intact", "matrix", "degraded"))
glimpse(shrubdensitylife_full)
#dim(shrubdensitylife_full)
#head(shrubdensitylife_full)
#tail(shrubdensitylife_full)
specnumber(shrubdensitylife_full)
# convert dataframe to tibble
shrubdensitylife_full <- as_tibble(shrubdensitylife_full)
class(shrubdensitylife_full) # now a tibble
# [1] "tbl_df"     "tbl"        "data.frame"
shrubdensitylife_transposed <- gather(shrubdensitylife_full, "status", "count", 5:9) # transpose data from wide to long format
glimpse(shrubdensitylife_transposed)
shrubdensity <- shrubdensitylife_transposed #
shrubdensity$site_rep <- paste(shrubdensity$site, shrubdensity$rep, sep="_") # combine site and rep to one column
shrubdensity$site_rep_species <- paste(shrubdensity$site_rep, shrubdensity$species, sep="_") # combine site and rep to one column
head(shrubdensity) # look at new column site_rep, last column
shrubdensity %>%
group_by(site_rep, status) %>%
summarize(length_count = length(count)) %>%
print(shrubdensity_sum_bysiterep_meanSD)
# all site_rep have 5 status categories: dead, immature, mature, resprout, seedling
# all status have 13 length_count --> 13 species per status
# take home = no missing data points
sort(unique(shrubdensity$site_rep))
sort(unique(shrubdensity$site_rep_species))
sort(unique(shrubdensity$species))
write.csv(shrubdensity,"processed/shrubdensity.csv")
# shrubdensityspp_full <- read_csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_beltdensity_byspecies.csv")
# shrubdensityalive_full <- read_csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/deg_beltdensity_seperatealive.csv")
# ALIVE
shrubdensity_sum_bysiterep <- shrubdensity %>% # call tibble
filter(status != "dead") %>% #omit dead shrubs
group_by(standtype, site_rep) %>%  # lump immature, mature, resprout shrubs and seedlings
summarize(aliveshrubdensity_80m2 = sum(count),
aliveshrubdensity_1m2 = aliveshrubdensity_80m2/80) %>% # 4m x 20 m belt transect
print(shrubdensity_sum_bysiterep)
nativecover <- read.csv("processed/abcover_nativecover_nngrasscover.csv") # native percent cover from ch1_standdeg_canopy.Rmd
sort(unique(nativecover$site_rep))
# "DEG1_1"     "DEG1_2"     "DEG1_3"     "DEG2_4"     "DEG2_5"     "DEG2_6"     "ENH1_1"     "ENH1_2"     "ENH1_3"     "ENH2_4"     "ENH2_5"
# "ENH2_6"     "Intact_1_1" "Intact_2_2" "Intact_3_3"
glimpse(nativecover)
nncover <- read.csv("processed/abcover_nonnativecover_nngrasscover.csv") # non-native percent cover from ch1_standdeg_canopy.Rmd
sort(unique(nncover$site_rep))
# "DEG1_1"     "DEG1_2"     "DEG1_3"     "DEG2_4"     "DEG2_5"     "DEG2_6"     "ENH1_1"     "ENH1_2"     "ENH1_3"     "ENH2_4"     "ENH2_5"
# "ENH2_6"     "Intact_1_1" "Intact_2_2" "Intact_3_3"
glimpse(nncover)
shrubdensity_sum_bysiterep_nat <- shrubdensity_sum_bysiterep %>%
left_join(nativecover, by = "site_rep")
shrubdensity_sum_bysiterep_nat_nn <- shrubdensity_sum_bysiterep_nat %>% # join above ground species diversity with non-native transect percent cover
left_join(nncover, by = "site_rep")
view(shrubdensity_sum_bysiterep_nat_nn)
shrubdensity_sum_bysiterep_regression <- ggplot(data = shrubdensity_sum_bysiterep_nat_nn,
aes(x = nonnative_grass*100, y = aliveshrubdensity_1m2, shape = standtype, color = standtype)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 3)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Shrub Density (#/m2)",
title = "Shrub density (per m2) x non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(shrubdensity_sum_bysiterep_regression)
