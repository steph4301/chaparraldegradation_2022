seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230801.csv", header = TRUE, na.strings=c("","NA"))
charate_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="charate"]
control_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="control"]
oven_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="oven"]
ovenchar_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="ovenchar"]
firefollowers = unique(c(charate_spp, oven_spp, ovenchar_spp))
fire_only = tibble(firefollowers[!firefollowers %in% control_spp])
library(here) # similar to set working directory
library(tidyverse) # data wrangling - includes ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats
library(ggplot2) # data visualization
library(dplyr)
library(ggthemes)
library(plotly)
library(ggpubr) # customize ggplot2 for publication
library(vegan) #community ecology package - includes, MASS, cluster, mgcv
library(multcompView) #Visualizations of Paired Comparisons, functions: TukeyHSD, dist{stats}, simint, simtest, csimint, csimtest{multcomp}, friedmanmc, kruskalmc{pgirmess}
fire_only = tibble(firefollowers[!firefollowers %in% control_spp])
control_df = tibble(control_df)
control_df = tibble(control_spp)
head(seedbank_load_raw)
str(seedbank_load_raw)
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"))
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"))
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"))
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"))
head(seedbank_load_raw)
str(seedbank_load_raw)
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"),
col_types = cols(
year = col_character(),
stand = col_character(),
site = col_character(),
soilcore = col_character(),
depth_cm = col_character(),
depth_name = col_character(),
treatment = col_character(),
species_diversity = col_character(),
genus_abundance = col_character(),
lifeform = col_character(),
status = col_character(),
status_native = col_character(),
status_nonnative = col_character(),
lifescycle = col_character(),
family = col_character(),
count = col_integer(),
notes = col_character()
))
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"))
seedbank_load_raw <- seedbank_load_raw %>%
mutate(col_types = cols(
col_types = cols(
year = col_character(),
stand = col_character(),
site = col_character(),
soilcore = col_character(),
depth_cm = col_character(),
depth_name = col_character(),
treatment = col_character(),
species_diversity = col_character(),
genus_abundance = col_character(),
lifeform = col_character(),
status = col_character(),
status_native = col_character(),
status_nonnative = col_character(),
lifescycle = col_character(),
family = col_character(),
count = col_integer(),
notes = col_character()
)))
seedbank_load_raw <- seedbank_load_raw %>%
mutate(col_types = cols(
year = col_character(),
stand = col_character(),
site = col_character(),
soilcore = col_character(),
depth_cm = col_character(),
depth_name = col_character(),
treatment = col_character(),
species_diversity = col_character(),
genus_abundance = col_character(),
lifeform = col_character(),
status = col_character(),
status_native = col_character(),
status_nonnative = col_character(),
lifescycle = col_character(),
family = col_character(),
count = col_integer(),
notes = col_character()
))
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"))
head(seedbank_load_raw)
str(seedbank_load_raw)
control_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="control"]
charate_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="charate"]
oven_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="oven"]
ovenchar_spp = seedbank_load_raw$species_diversity[seedbank_load_raw$treatment=="ovenchar"]
firefollowers = unique(c(charate_spp, oven_spp, ovenchar_spp))
fire_only = tibble(firefollowers[!firefollowers %in% control_spp])
control_df = tibble(control_spp)
print(firefollowers)
View(seedbank_load_raw)
seedbank_load <- seedbank_load_raw %>%
select(c("stand", "site", "soilcore", "depthname", "treatment", "species", "lifeform", "status", "lifecycle", "family", "totalcount"))
str(seedbank_load_raw)
glimpse(seedbank_load_raw)
str(seedbank_load_raw)
glimpse(seedbank_load_raw)
str(seedbank_load_raw)
glimpse(seedbank_load_raw)
unique(seedbank_load$stand)
unique(seedbank_load_raw$stand)
seedbank_load_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_seedbank_20230915.csv", header = TRUE, na.strings=c("","NA"))
unique(seedbank_load_raw$species)
glimpse(seedbank_load_raw)
unique(seedbank_load_raw$species)
glimpse(seedbank_load_raw)
unique(seedbank_load_raw$species_diversity)
INT_seedbank <- seedbank_load_raw %>%
filter(stand == "intact")
ENH_seedbank <- seedbank_load_raw %>%
filter(stand == "enhanced")
DEG_seedbank <- seedbank_load_raw %>%
filter(stand == "degraded")
unique(INT_seedbank$species_diversity)
unique(INT_seedbank$species_diversity, na.omit())
unique(INT_seedbank$species_diversity, na.omit(species_diversity))
unique(INT_seedbank$species_diversity))
unique(INT_seedbank$species_diversity)
INT_seedbank %>%
na.omit() %>%
unique(species_diversity)
glimpse(INT_seedbank)
unique(INT_seedbank$species_diversity)
unique(INT_seedbank$species_diversity & INT_seedbank$status == "native")
unique(INT_seedbank$species_diversity)
INT_speciesdiversity <- unique(INT_seedbank$species_diversity)
print(INT_speciesdiversity)
view(INT_speciesdiversity)
INT_speciesdiversity %>%
filter(status == "native") %>%
summarize(N_native = unique(species_diversity))
INT_speciesdiversity %>%
filter(status == "native")
INT_seedbank %>%
filter(status == "native") %>%
summarize(N_native = unique(species_diversity))
INT_seedbank %>%
filter(status == "native")
INT_seedbank %>%
filter(status == "native") %>%
summarize(N_native = length(unique(species_diversity)))
INT_seedbank %>%
filter(status == "nonnative") %>%
summarize(N_native = length(unique(species_diversity)))
INT_seedbank %>%
group_by(status) %>%
summarize(N_native = uniquie(species_diversity = "native"),
N_nonnative = unique(species_diversity = "nonnative"))
INT_seedbank %>%
group_by(status) %>%
summarize(N_native = unique(species_diversity = "native"),
N_nonnative = unique(species_diversity = "nonnative"))
INT_seedbank %>%
group_by(status)
INT_seedbank %>%
group_by(status) %>%
summarise(species = species_diversity)
N_native = unique(species_diversity)
INT_seedbank %>%
group_by(status) %>%
summarise(species = species_diversity,
N_native = unique(species_diversity))
INT_seedbank %>%
filter(status == "nonnative") %>%
summarize(N_native = length(unique(species_diversity)))
fire_only = tibble(firefollowers[!firefollowers %in% control_spp])
print(fire_only)
print(firefollowers)
print(control_spp)
fire_only = tibble(firefollowers[!firefollowers %in% control_spp])
firefollowers = unique(c(charate_spp, oven_spp, ovenchar_spp))
print(firefollowers)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # includes ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats
library(ggplot2) # data visualization
library(readr)
library(dplyr)
library(ggpubr) # customize ggplot2 for publication
library(broom)
library(AICcmodavg)
library(vegan)
library(readxl) # for .xls and .xlsx sheets
library(janitor)
library(calecopal)
library(multcompView)
library(plotly)
library(ggvegan)
# percent cover
abcover_full_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_percentcover_byspecies_bylifeform.csv", header = TRUE, na.strings=c("","NA"))
str(abcover_full_raw)
head(abcover_full_raw)
tail(abcover_full_raw)
# convert dataframe to tibble
abcover_full_raw <- as_tibble(abcover_full_raw)
class(abcover_full_raw) # now a tibble
abcover_full_v <- abcover_full_raw %>%
mutate(standtype = fct_relevel(standtype,
"intact", "enhancement", "degraded"))
# renaming observations
abcover_full_v$standtype <- factor(abcover_full_v$standtype, levels=c("intact", "enhancement", "degraded"), labels=c("Intact", "Matrix", "Degraded"))
# combine site and rep to one column
abcover_full_v$site_rep <- paste(abcover_full_v$site, abcover_full_v$rep, sep="_")
# combine site_rep and distance to one column
abcover_full_v$site_rep_dist <- paste(abcover_full_v$site_rep, abcover_full_v$distance, sep="_")
# combine standtype and native/nonnative status to one column
abcover_full_v$stand_status <- paste(abcover_full_v$standtype, abcover_full_v$status, sep="_")
# combine site_rep and species to one column
abcover_full_v$site_rep_species <- paste(abcover_full_v$site_rep, abcover_full_v$species, sep="_")
head(abcover_full_v) # look at new columns
unique(abcover_byspecies$standtype)
abcover_full_v_omitground <- filter(abcover_full_v, status !="ground")
head(abcover_full_v_omitground)
abcover_byspecies <- abcover_full_v_omitground %>%
group_by(standtype, site, site_rep, species) %>%
filter(site_rep != "Intact4_4") %>% #omit Intact 4 from data
filter(!is.na(species)) %>% # omit blank cells in species
dplyr::summarize(count_per_dist = n_distinct(site_rep_dist), percentcover = n_distinct(site_rep_dist)/41) %>%
select(!c(count_per_dist))
head(abcover_byspecies) # prints to new tab
unique(abcover_byspecies$standtype)
unique(abcover_byspecies$site)
unique(abcover_byspecies$species)
sppr <- specnumber(abcover_byspecies_nmdsprep_num)
sppdiv_aov <- aov(shannondiv ~ standtype, data = abcover_byspecies_nmdsprep)
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) %>% # transpose data so columns are species
replace(is.na(.), 0) # replace NA with zeros
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) %>% # transpose data so columns are species
replace(is.na(.), 0) # replace NA with zeros
abcover_byspecies <- abcover_full_v_omitground %>%
group_by(standtype, site, site_rep, species) %>%
filter(site_rep != "Intact4_4") %>% #omit Intact 4 from data
filter(!is.na(species)) %>% # omit blank cells in species
dplyr::summarize(count_per_dist = n_distinct(site_rep_dist), percentcover = n_distinct(site_rep_dist)/41) %>%
select(!c(count_per_dist))
head(abcover_byspecies) # prints to new tab
unique(abcover_byspecies$standtype)
unique(abcover_byspecies$site)
unique(abcover_byspecies$species)
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) %>% # transpose data so columns are species
replace(is.na(.), 0) # replace NA with zeros
view(abcover_byspecies)
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover)
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) %>% # transpose data so columns are species
replace(is.na(.), 0)
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) #%>% # transpose data so columns are species
view(abcover_byspecies_nmdsprep)
str(abcover_byspecies)
library(ggvegan)
if (!require(devtools)) {
install.packages("devtools")
}
devtools::install_github("gavinsimpson/ggvegan")
# percent cover
abcover_full_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_percentcover_byspecies_bylifeform.csv", header = TRUE, na.strings=c("","NA"))
# percent cover
abcover_full_raw <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/deg_percentcover_byspecies_bylifeform.csv", header = TRUE, na.strings=c("","NA"))
str(abcover_full_raw)
# convert dataframe to tibble
abcover_full_raw <- as_tibble(abcover_full_raw)
abcover_full_v <- abcover_full_raw %>%
mutate(standtype = fct_relevel(standtype,
"intact", "enhancement", "degraded"))
# renaming observations
abcover_full_v$standtype <- factor(abcover_full_v$standtype, levels=c("intact", "enhancement", "degraded"), labels=c("Intact", "Matrix", "Degraded"))
view(abcover_full_v)
unique(abcover_full_v$species)
unique(abcover_full_v$standtype)
view(abcover_full_raw)
unique(abcover_full_raw$standtype)
abcover_full_v <- abcover_full_raw %>%
mutate(standtype = fct_relevel(standtype,
"intact", "matrix", "degraded"))
# renaming observations
abcover_full_v$standtype <- factor(abcover_full_v$standtype, levels=c("intact", "matrix", "degraded"), labels=c("Intact", "Matrix", "Degraded"))
unique(abcover_full_v$standtype)
# renaming observations
abcover_full_v$standtype <- factor(abcover_full_v$standtype, levels=c("intact", "matrix", "degraded"), labels=c("Intact", "Matrix", "Degraded"))
# combine site and rep to one column
abcover_full_v$site_rep <- paste(abcover_full_v$site, abcover_full_v$rep, sep="_")
# combine site_rep and distance to one column
abcover_full_v$site_rep_dist <- paste(abcover_full_v$site_rep, abcover_full_v$distance, sep="_")
# combine standtype and native/nonnative status to one column
abcover_full_v$stand_status <- paste(abcover_full_v$standtype, abcover_full_v$status, sep="_")
# combine site_rep and species to one column
abcover_full_v$site_rep_species <- paste(abcover_full_v$site_rep, abcover_full_v$species, sep="_")
head(abcover_full_v) # look at new columns
# renaming observations
abcover_full_v$standtype <- factor(abcover_full_v$standtype, levels=c("intact", "matrix", "degraded"), labels=c("Intact", "Matrix", "Degraded"))
view(abcover_full_v)
abcover_full_v <- abcover_full_raw %>%
mutate(standtype = fct_relevel(standtype,
"intact", "matrix", "degraded"))
abcover_full_v
unique(abcover_full_v$standtype)
# renaming observations
abcover_full_v$standtype <- factor(abcover_full_v$standtype, levels=c("intact", "matrix", "degraded"), labels=c("Intact", "Matrix", "Degraded"))
unique(abcover_full_v$standtype)
# combine site and rep to one column
abcover_full_v$site_rep <- paste(abcover_full_v$site, abcover_full_v$rep, sep="_")
# combine site_rep and distance to one column
abcover_full_v$site_rep_dist <- paste(abcover_full_v$site_rep, abcover_full_v$distance, sep="_")
# combine standtype and native/nonnative status to one column
abcover_full_v$stand_status <- paste(abcover_full_v$standtype, abcover_full_v$status, sep="_")
# combine site_rep and species to one column
abcover_full_v$site_rep_species <- paste(abcover_full_v$site_rep, abcover_full_v$species, sep="_")
head(abcover_full_v) # look at new columns
abcover_full_v_omitground <- filter(abcover_full_v, status !="ground")
head(abcover_full_v_omitground)
abcover_byspecies <- abcover_full_v_omitground %>%
group_by(standtype, site, site_rep, species) %>%
filter(site_rep != "Intact4_4") %>% #omit Intact 4 from data
filter(!is.na(species)) %>% # omit blank cells in species
dplyr::summarize(count_per_dist = n_distinct(site_rep_dist), percentcover = n_distinct(site_rep_dist)/41) %>%
select(!c(count_per_dist))
head(abcover_byspecies) # prints to new tab
unique(abcover_byspecies$standtype)
unique(abcover_byspecies$site)
unique(abcover_byspecies$species)
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) %>% # transpose data so columns are species
replace(is.na(.), 0) # replace NA with zeros
view(abcover_byspecies_nmdsprep)
# 15 sites (rows) by 37 columns
str(abcover_byspecies_nmdsprep)
abcover_byspecies_nmdsprep_num <- abcover_byspecies_nmdsprep %>%
# use the ungroup() function to take out grouping
ungroup() %>%
select(!c(standtype, site, site_rep, standtype_ID))
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) %>% # transpose data so columns are species
replace(is.na(.), 0) # replace NA with zeros
view(abcover_byspecies_nmdsprep)
abcover_byspecies_nmdsprep_num <- abcover_byspecies_nmdsprep %>%
# use the ungroup() function to take out grouping
ungroup() %>%
select(!c(standtype, site, site_rep))
view(abcover_byspecies_nmdsprep_num) # only numbers
write.csv(abcover_byspecies_nmdsprep_num, "~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022b/processed/nmds_aboveground.csv")
view(abcover_byspecies)
view(abcover_byspecies_nmdsprep)
# the AUTOTRANSFORM = F skips the automatic data transformations and uses the input data as is
# - when the raw data contains the information you need (e.g., abundance)
# - when you have a small number of samples or small number of variables
# - when you want to preseve the original scale of the data (e.g., interested in the absolute differences betwen two sets of measurements)
abcover_byspecies_NMDS <- metaMDS(abcover_byspecies_nmdsprep_num, autotransform = F) # this is more appropriate for my data
stressplot(abcover_byspecies_NMDS)
nmds_above_df <- data.frame(abcover_byspecies_NMDS$points, abcover_byspecies_nmdsprep) # code from chatgpt
view(nmds_above_df)
nmds_above_df <- data.frame(abcover_byspecies_NMDS$points, abcover_byspecies_nmdsprep) # code from chatgpt
abcover_byspecies_nmdsprep <- abcover_byspecies_nmdsprep %>%
mutate(standtype_ID = 1)
abcover_byspecies_nmdsprep$standtype_ID <- 1:15
plot_above_df <- scores(abcover_byspecies_NMDS, display = "sites") %>%
as.data.frame() %>%
rownames_to_column("standtype_ID") %>%
mutate_at(c('standtype_ID'), as.numeric) %>%
full_join(abcover_byspecies_nmdsprep, by = "standtype_ID") %>%
select(!c(standtype_ID))
view(plot_above_df)
# envfit() takes the output of metaMDS() and the species matrix you created
fit_above <- envfit(abcover_byspecies_NMDS, abcover_byspecies_nmdsprep, perm = 999) # pvalues for spp and stand, site, stand_core
# extract p-values for each species
fit_above_pvals <- fit_above$vectors$pvals %>%
as.data.frame() %>%
rownames_to_column("species") %>%
dplyr::rename("pvals" = ".")
view(fit_above_pvals)
# extract coordinates for species, only keep species with p-val = 0.05
fit_above_spp <- fit_above %>%
scores(., display = "vectors") %>%
as.data.frame() %>%
rownames_to_column("species") %>%
full_join(., fit_above_pvals, by = "species") %>%
filter(pvals < 0.05) %>%  # limited number for visual clarity
filter(!species == 'standtype_ID')
view(fit_above_spp)
# new plot
nmdsabove_plot_new <- ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2)) +
#coord_fixed() +
geom_point(aes(color = standtype, shape = standtype), size = 3, alpha = 0.8) +
stat_ellipse(aes(color = standtype)) +
scale_color_manual(values = c("darkgreen", "darkmagenta", "darkgoldenrod1")) +
geom_segment(data = fit_above_spp, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")),
col = "black") +
geom_text(data = fit_above_spp, aes(label = species),
position = position_jitter(width = 0.2, height = 0.3))
nmdsabove_plot_new + theme_bw()
ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2)) +
#coord_fixed() +
geom_point(aes(color = standtype, shape = standtype), size = 3, alpha = 0.8) +
stat_ellipse(aes(color = standtype)) +
scale_color_manual(values = c("darkgreen", "darkmagenta", "darkgoldenrod1")) +
geom_segment(data = fit_above_spp, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")),
col = "black") +
geom_text(data = fit_above_spp, aes(label = species),
position = position_jitter(width = 0.2, height = 0.3))
# new plot
nmdsabove_plot_new <- ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2)) +
#coord_fixed() +
geom_point(aes(color = standtype, shape = standtype), size = 3, alpha = 0.8) +
stat_ellipse(aes(color = standtype)) +
scale_color_manual(values = c("darkgreen", "darkmagenta", "darkgoldenrod1")) +
geom_segment(data = fit_above_spp, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")),
col = "black") +
geom_text(data = fit_above_spp, aes(label = species),
position = position_jitter(width = 0.2, height = 0.3))
nmdsabove_plot_new
ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2)) +
#coord_fixed() +
geom_point(aes(color = standtype, shape = standtype), size = 3, alpha = 0.8) +
stat_ellipse(aes(color = standtype)) +
scale_color_manual(values = c("darkgreen", "darkmagenta", "darkgoldenrod1")) +
geom_segment(data = fit_above_spp, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")),
col = "black") +
geom_text(data = fit_above_spp, aes(label = species),
position = position_jitter(width = 0.2, height = 0.3))
ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2)) +
#coord_fixed() +
geom_point(aes(color = standtype, shape = standtype), size = 3, alpha = 0.8) +
stat_ellipse(aes(color = standtype))
ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2))
view(fit_above_spp)
#this makes a dataframe that gives a lot of control graphically
abcover_byspecies_NMDS_fort <- fortify(abcover_byspecies_NMDS)
# vectors AND measurments
abcover_byspecies_NMDS_fortplot <- ggplot() +
geom_point(data = subset(abcover_byspecies_NMDS_fort, Score == 'sites'),
mapping = aes(x = NMDS1, y = NMDS2, group = ""),
color = 'black',
size = 4,
alpha = 1) +
geom_segment(data = subset(abcover_byspecies_NMDS_fort, Score == 'species'),
mapping = aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.015, "npc"),
type = 'closed'),
color = 'darkgrey',
linewidth = 0.8) +
geom_text(data = subset(abcover_byspecies_NMDS_fort, Score == 'species'),
mapping = aes(label = Label, x = NMDS1*1.1, y = NMDS2*1.1),
position = position_jitter(width = 0.2, height = 0.2)) +
geom_abline(intercept = 0,slope = 0,linetype = "dashed", linewidth = 0.8,colour = "gray")+
geom_vline(aes(xintercept = 0), linetype = "dashed", linewidth = 0.8, colour = "gray")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
# extract p-values for each species
fit_above_pvals <- fit_above$vectors$pvals %>%
as.data.frame() %>%
rownames_to_column("species") %>%
dplyr::rename("pvals" = ".")
view(fit_above_pvals)
#this makes a dataframe that gives a lot of control graphically
abcover_byspecies_NMDS_fort <- fortify(abcover_byspecies_NMDS)
nmds_above_df <- data.frame(abcover_byspecies_NMDS$points, abcover_byspecies_nmdsprep) # code from chatgpt
abcover_byspecies_nmdsprep <- abcover_byspecies_nmdsprep %>%
mutate(standtype_ID = 1)
abcover_byspecies_nmdsprep$standtype_ID <- 1:15
plot_above_df <- scores(abcover_byspecies_NMDS, display = "sites") %>%
as.data.frame() %>%
rownames_to_column("standtype_ID") %>%
mutate_at(c('standtype_ID'), as.numeric) %>%
full_join(abcover_byspecies_nmdsprep, by = "standtype_ID") %>%
select(!c(standtype_ID))
view(plot_above_df)
# envfit() takes the output of metaMDS() and the species matrix you created
fit_above <- envfit(abcover_byspecies_NMDS, abcover_byspecies_nmdsprep, perm = 999) # pvalues for spp and stand, site, stand_core
# extract p-values for each species
fit_above_pvals <- fit_above$vectors$pvals %>%
as.data.frame() %>%
rownames_to_column("species") %>%
dplyr::rename("pvals" = ".")
view(fit_above_pvals)
# extract coordinates for species, only keep species with p-val = 0.05
fit_above_spp <- fit_above %>%
scores(., display = "vectors") %>%
as.data.frame() %>%
rownames_to_column("species") %>%
full_join(., fit_above_pvals, by = "species") %>%
filter(pvals < 0.05) %>%  # limited number for visual clarity
filter(!species == 'standtype_ID')
# new plot
nmdsabove_plot_new <- ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2)) +
#coord_fixed() +
geom_point(aes(color = standtype, shape = standtype), size = 3, alpha = 0.8) +
stat_ellipse(aes(color = standtype)) +
scale_color_manual(values = c("darkgreen", "darkmagenta", "darkgoldenrod1")) +
geom_segment(data = fit_above_spp, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")),
col = "black") +
geom_text(data = fit_above_spp, aes(label = species),
position = position_jitter(width = 0.2, height = 0.3))
nmdsabove_plot_new + theme_bw()
