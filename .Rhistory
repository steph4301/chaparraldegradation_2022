glimpse(pointintercept_load)
str(pointintercept_load)
# convert dataframe to tibble
abcover_full_tib <- as_tibble(pointintercept_load)
class(abcover_full_tib)
abcover_full_v <- abcover_full_tib %>%
mutate(site_rep = paste(site, transect, sep = "_")) %>% # combine site and rep to one column
mutate(site_rep_dist = paste(site_rep, distance, sep = "_")) %>% # combine site_rep and distance to one column
mutate(stand_status = paste(standtype, status, sep = "_")) # combine standtype and native/nonnative status to one column
# %>%   mutate(site_rep = fct_relevel
# (site_rep,
#                        "INT1_1", "INT2_2", "INT3_3", "ENH1_1", "ENH1_2",    "ENH1_3"  ,   "ENH2_4"  ,   "ENH2_5"    , "ENH2_6"  , "DEG1_1"   ,  "DEG1_2"  ,   "DEG1_3"     ,"DEG2_4" ,    "DEG2_5"    , "DEG2_6" ))
glimpse(abcover_full_v) # look at new columns
sort(unique(abcover_full_v$species))
abcover_full_v %>%
# na.omit() %>%
group_by(site, hillslope, transect) %>%
summarize(data_points = length(unique(distance)))
# omit "ground" as a status since interested in Native and Non-native species
abcover_full_v_omitground <- filter(abcover_full_v, status =="native" |status == "nonnative")
view(abcover_full_v_omitground)
shrubs <- abcover_full_v_omitground %>%
filter(lifeform == "shrub") %>%
left_join(shrub_leaftype, by = "species") %>%
dplyr::select(!c(lifeform)) %>%
rename(lifeform = leaftype ) # newname = oldname
herbsgrassesfern <-  abcover_full_v_omitground %>%
filter(lifeform =="herb" | lifeform == "grass" | lifeform == "fern")
lifeformleaftype <- rbind(herbsgrassesfern, shrubs) %>%
group_by(site_rep_dist) %>%
mutate(lifeform_status = paste(lifeform, status, sep = "_")) %>%
group_by(standtype, site, transect, site_rep, lifeform, status, lifeform_status) %>%
dplyr::summarize(
count_per_transect = n_distinct(site_rep_dist),
percentcover = n_distinct(site_rep_dist)/41) %>% # <-- calculate percent cover
ungroup() #%>%
#  mutate(standtype = fct_relevel(standtype,"intact", "matrix", "degraded")) %>%
#  mutate(site = fct_relevel(site, "INT1", "INT2", "INT3", "ENH1", "ENH2", "DEG1", "DEG2")) %>%
# # mutate(site_rep = fct_relevel(site_rep, "INT1_1", "INT2_2", "INT3_3", "ENH1_1" ,    "ENH1_2"   ,  "ENH1_3" ,    "ENH2_4" ,    "ENH2_5"    ,"ENH2_6", "DEG1_1",     "DEG1_2"  ,   "DEG1_3"   ,  "DEG2_4" ,    "DEG2_5"   ,  "DEG2_6")) %>%
# mutate(lifeform_status = fct_relevel(lifeform_status, "grass_nonnative", "herb_nonnative",
#                                 "fern_native",     "grass_native", "herb_native", "nonsclero_native", "sclerophyllous_native")
#)
view(lifeformleaftype)
# line 933 from Ch1_Degradation_original.Rmd
# data prep
abcover_bylf_bystatus <- abcover_full_v_omitground %>%
group_by(standtype, lifeform, status, site, transect, site_rep, year) %>%
dplyr::summarize(
count_per_transect = n_distinct(site_rep_dist),
percentcover = n_distinct(site_rep_dist)/41 # <-- calculate percent cover by transect, lifeform, and status
) %>%
ungroup() %>%
unite("lifeform_total", 2:3, sep = "_") #combines characters in two columns to one column
# view(abcover_bylf_bystatus) # prints to new tab
#write.csv(abcover_bylf_bystatus,"processed/abcover_bylf_bystatus.csv")
# visualizing data
## histogram
hist(abcover_bylf_bystatus$percentcover)
## histogram
hist(abcover_bylf_bystatus$percentcover)
knitr::opts_chunk$set(echo = TRUE)
# df<- df_load %>%
#  mutate(site_rep = paste(site, transect, sep = "_")) %>% # create new column
# unite("lifeform_total", 2:3, sep = "_") # consolidate columns
library(here) # similar to set working directory
library(tidyverse) # data wrangling - includes ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats
# library(lubridate) # dates and times
library(ggplot2) # data visualization
library(gridExtra)
# library(readr)
library(dplyr)
library(ggthemes)
library(plotly)
library(ggpubr) # customize ggplot2 for publication
#library(broom)
#library(AICcmodavg)
library(vegan) #community ecology package - includes, MASS, cluster, mgcv
library(readxl) # for .xls and .xlsx sheets
#library(janitor)
library(multcompView) #Visualizations of Paired Comparisons, functions: TukeyHSD, dist{stats}, simint, simtest, csimint, csimtest{multcomp}, friedmanmc, kruskalmc{pgirmess}
#library(multcomp) # functions: multcompLetters2, multcompLetters3, multcompLetters4 using aov object
#library(DHARMa) #The ‘DHARMa’ package uses a simulation-based approach to create readily interpretable scaled (quantile) residuals for fitted (generalized) linear mixed models.
#citation("DHARMa")
library(ggpmisc)
library(segmented)
library(strucchange)
library(ggpattern)
library(lme4)
library(lmerTest) # load again or update if you're not getting p-values from environmental models
devtools::install_github("an-bui/calecopal")
library(calecopal)
# all palettes
names(cal_palettes)
# Stand colors: INTACT, MATRIX, DEGRADED
cal_palette(name = "chaparral3", n = 3, type = "continuous")
#deg <- "#D3E3CA"
#mat <- "#92A587"
#int <- "#2F3525"
deg <- "gray60"
mat <- "gray40"
int <- "gray20"
line <- "red"
degshape <- 16
matshape <- 17
intshape <- 18
standcolors <- c(int, mat, deg)
standcolors_line <- c(line, int, mat, deg)
standshape <- c(intshape, matshape, degshape)
# Lifeform colors: shrub, grass, forb
cal_palette(name = "chaparral3", n = 3, type = "continuous")
shrub <- "green4"
grass <- "yellow2"
forb <- "purple2"
fern <- "black"
lifeformcolors <- c(shrub, grass, forb, fern)
# Status colors: native, exotic
cal_palette(name = "chaparral1", n = 6, type = "continuous")
native <- "gray50"
nonnative <- "gray0"
statuscolors <- c(native, nonnative)
# "orange", "lightblue", "limegreen", "deeppink","mediumpurple2", "darkgreen"
# percent cover - belt transects, point intercept transects
pointintercept_load <- read.csv("deg_percentcover_byspecies_bylifeform_2024.csv", header = TRUE, na.strings=c("","NA")) %>%
#rename(speciescode = species.1 ) %>%
mutate(standtype = fct_relevel(standtype,
"degraded", "matrix", "intact")) %>%
dplyr::select(!c(species_code, notes)) # %>%
# mutate(site = case_when(site == "Intact_1" ~ "INT1",
#                             site == "Intact_2" ~ "INT2",
#                             site == "Intact_3" ~ "INT3",
#       TRUE ~ site))
glimpse(pointintercept_load)
str(pointintercept_load)
# convert dataframe to tibble
abcover_full_tib <- as_tibble(pointintercept_load)
class(abcover_full_tib)
abcover_full_v <- abcover_full_tib %>%
mutate(site_rep = paste(site, transect, sep = "_")) %>% # combine site and rep to one column
mutate(site_rep_dist = paste(site_rep, distance, sep = "_")) %>% # combine site_rep and distance to one column
mutate(stand_status = paste(standtype, status, sep = "_")) # combine standtype and native/nonnative status to one column
# %>%   mutate(site_rep = fct_relevel
# (site_rep,
#                        "INT1_1", "INT2_2", "INT3_3", "ENH1_1", "ENH1_2",    "ENH1_3"  ,   "ENH2_4"  ,   "ENH2_5"    , "ENH2_6"  , "DEG1_1"   ,  "DEG1_2"  ,   "DEG1_3"     ,"DEG2_4" ,    "DEG2_5"    , "DEG2_6" ))
glimpse(abcover_full_v) # look at new columns
sort(unique(abcover_full_v$species))
abcover_full_v %>%
# na.omit() %>%
group_by(site, hillslope, transect) %>%
summarize(data_points = length(unique(distance)))
# omit "ground" as a status since interested in Native and Non-native species
abcover_full_v_omitground <- filter(abcover_full_v, status =="native" |status == "nonnative")
print(abcover_full_v_omitground)
shrubs <- abcover_full_v_omitground %>%
filter(lifeform == "shrub") %>%
left_join(shrub_leaftype, by = "species") %>%
dplyr::select(!c(lifeform)) %>%
rename(lifeform = leaftype ) # newname = oldname
herbsgrassesfern <-  abcover_full_v_omitground %>%
filter(lifeform =="herb" | lifeform == "grass" | lifeform == "fern")
lifeformleaftype <- rbind(herbsgrassesfern, shrubs) %>%
group_by(site_rep_dist) %>%
mutate(lifeform_status = paste(lifeform, status, sep = "_")) %>%
group_by(standtype, site, transect, site_rep, lifeform, status, lifeform_status) %>%
dplyr::summarize(
count_per_transect = n_distinct(site_rep_dist),
percentcover = n_distinct(site_rep_dist)/41) %>% # <-- calculate percent cover
ungroup() #%>%
#  mutate(standtype = fct_relevel(standtype,"intact", "matrix", "degraded")) %>%
#  mutate(site = fct_relevel(site, "INT1", "INT2", "INT3", "ENH1", "ENH2", "DEG1", "DEG2")) %>%
# # mutate(site_rep = fct_relevel(site_rep, "INT1_1", "INT2_2", "INT3_3", "ENH1_1" ,    "ENH1_2"   ,  "ENH1_3" ,    "ENH2_4" ,    "ENH2_5"    ,"ENH2_6", "DEG1_1",     "DEG1_2"  ,   "DEG1_3"   ,  "DEG2_4" ,    "DEG2_5"   ,  "DEG2_6")) %>%
# mutate(lifeform_status = fct_relevel(lifeform_status, "grass_nonnative", "herb_nonnative",
#                                 "fern_native",     "grass_native", "herb_native", "nonsclero_native", "sclerophyllous_native")
#)
print(lifeformleaftype)
# data prep
abcover_bylf_bystatus <- abcover_full_v_omitground %>%
group_by(standtype, lifeform, status, site, transect, site_rep, year) %>%
dplyr::summarize(
count_per_transect = n_distinct(site_rep_dist),
percentcover = n_distinct(site_rep_dist)/41 # <-- calculate percent cover by transect, lifeform, and status
) %>%
ungroup() %>%
unite("lifeform_total", 2:3, sep = "_") #combines characters in two columns to one column
## histogram
hist(abcover_bylf_bystatus$percentcover)
```{r}
## jitter - by standtype
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, color = year)) +
geom_jitter()+
facet_wrap(~lifeform_total)
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype)) +
geom_jitter()
ggplot(data = abcover_bylf_bystatus, aes(y = percentcover*100, x = standtype, color = status)) +
geom_jitter()
str(abcover_bylf_bystatus)
abcover_bylf_bystatus_wide <- abcover_bylf_bystatus %>%
pivot_wider(names_from = lifeform_status, values_from = percentcover)
abcover_bylf_bystatus_wide <- abcover_bylf_bystatus %>%
pivot_wider(names_from = lifeform_total, values_from = percentcover)
abcover_bylf_bystatus_wide
abcover_bylf_bystatus_wide <- abcover_bylf_bystatus %>%
pivot_wider(names_from = lifeform_total, values_from = percentcover) %>%
replace_na(replace = list(grass_native = 0, grass_nonnative = 0))  # Replace NA with 0 for each value column
abcover_bylf_bystatus_wide
abcover_bylf_bystatus_wide <- abcover_bylf_bystatus %>%
pivot_wider(names_from = lifeform_total, values_from = percentcover) %>%
replace_na(replace = list(grass_native = 0, grass_nonnative = 0,
herb_native = 0, herb_nonnative = 0,
shrub_native = 0, shrub_nonnative = 0,
fern_native = 0, fern_nonnative = 0))  # Replace NA with 0 for each value column
abcover_bylf_bystatus_wide
view(abcover_bylf_bystatus_wide)
abcover_bylf_bystatus_wide <- abcover_bylf_bystatus %>%
dplyr::select(!c(count_per_transect)) %>%
pivot_wider(names_from = lifeform_total, values_from = percentcover) %>%
replace_na(replace = list(grass_native = 0, grass_nonnative = 0,
herb_native = 0, herb_nonnative = 0,
shrub_native = 0, shrub_nonnative = 0,
fern_native = 0, fern_nonnative = 0))  # Replace NA with 0 for each value column
abcover_bylf_bystatus_wide
ggplot(data = abcover_bylf_bystatus_wide,
aes(y = grass_nonnative*100, x = shrub_native*100, color = year)) +
geom_jitter()
ggplot(data = abcover_bylf_bystatus_wide,
aes(y = shrub_native*100, x = grass_nonnative*100, color = year)) +
geom_jitter()
ggplot(data = abcover_bylf_bystatus_wide,
aes(y = grass_nonnative*100, x = shrub_native*100, color = year)) +
geom_jitter()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: code to hang on to
# df<- df_load %>%
#  mutate(site_rep = paste(site, transect, sep = "_")) %>% # create new column
# unite("lifeform_total", 2:3, sep = "_") # consolidate columns
# Chunk 3: libraries
#install.packages(c("tidyverse", "ggplot2", "ggthemes", "plotly", "ggpubr", "vegan", "lme4", "ggpattern"))
library(here) # similar to set working directory
library(tidyverse) # data wrangling - includes ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats
# library(lubridate) # dates and times
library(ggplot2) # data visualization
#library(gridExtra)
# library(readr)
library(dplyr)
library(ggthemes)
library(plotly)
library(ggpubr) # customize ggplot2 for publication
#library(broom)
#library(AICcmodavg)
#library(vegan) #community ecology package - includes, MASS, cluster, mgcv
library(readxl) # for .xls and .xlsx sheets
#library(janitor)
library(multcompView) #Visualizations of Paired Comparisons, functions: TukeyHSD, dist{stats}, simint, simtest, csimint, csimtest{multcomp}, friedmanmc, kruskalmc{pgirmess}
#library(multcomp) # functions: multcompLetters2, multcompLetters3, multcompLetters4 using aov object
#library(DHARMa) #The ‘DHARMa’ package uses a simulation-based approach to create readily interpretable scaled (quantile) residuals for fitted (generalized) linear mixed models.
#citation("DHARMa")
#library(ggpmisc)
library(segmented)
#library(strucchange)
library(ggpattern)
library(lme4)
library(lmerTest) # load again or update if you're not getting p-values from environmental models
# Chunk 4: colors
devtools::install_github("an-bui/calecopal")
library(calecopal)
# all palettes
names(cal_palettes)
#chaparral1
#chaparral2
cal_palette(name = "chaparral3", n = 20, type = "continuous")
#species colors
HEAR <- "#D3E3CA"
RHOV <- "#92A587"
RHIL <- "#2F3525"
MAFA <- "gray60"
SALE <- "gray40"
ARCA <- "gray20"
scl <- 16
css <- 17
colors_scl <- c(HEAR, RHOV, RHIL)
colors_css <- c(MAFA, SALE, ARCA)
# Lifeform colors: shrub, grass, forb
shrub <- "green4"
grass <- "yellow2"
forb <- "purple2"
fern <- "black"
colors_lifeform <- c(shrub, grass, forb, fern)
# Status colors: native, exotic
native <- "gray50"
nonnative <- "gray0"
colors_status <- c(native, nonnative)
# "orange", "lightblue", "limegreen", "deeppink","mediumpurple2", "darkgreen"
# Chunk 5: load point intercept transect data from csv
file_transect_2019_load <- read_excel("deg_percentcover_byspecies_bylifeform_2024.xlsx", sheet = "2019_data")
# -- years 2017, 2019
# -- Site 1: transects 1-6
# -- Site 2: transects 1-6
# -- INT1, INT2, INT3, INT4
transect2019 <- file_transect_2019_load %>%
dplyr::select(c(site, transect, year, distance, vertical, species)) %>% # select columns to full join with 2024 data
filter(year %in% c(2017, 2019)) %>% #filter data to 2019 data
dplyr::select(year, site, transect, distance, vertical, species)
# View the data (optional)
#View(transect2019)
#sort(unique(transect2019$transect))
#sort(unique(transect2019$site))
file_transect_2024_load <- read.csv("Transects_2024 - transect.csv", header = TRUE, na.strings=c("","NA"))
# -- years 2024
# -- Site 1: transects 7-14
# -- Site 2: transects 7-18
# -- INT5
transect2024 <- file_transect_2024_load %>%
dplyr::select(c(site, transect, year, distance, vertical, species)) %>%
filter(species != "N/A")
# View the data (optional)
#View(transect_2024)
#sort(unique(transect_2024$transect))
#sort(unique(transect_2024$site))
# Chunk 6: full join
abcover_fulljoin <- full_join(transect2019, transect2024,
by = intersect(names(transect2019), names(transect2024)))
# View the data (optional)
#View(abcover_full)
#sort(unique(abcover_full$transect))
#sort(unique(abcover_full$site))
# convert dataframe to tibble
abcover_fulljoin_tib <- as_tibble(abcover_fulljoin)
class(abcover_fulljoin_tib)
abcover_full <- abcover_fulljoin_tib %>%
mutate(site_rep = paste(site, transect, sep = "_")) %>% # combine site and rep to one column
mutate(site_rep_dist = paste(site_rep, distance, sep = "_")) %>%  # combine site_rep and distance to one column
mutate(species = case_when(species == "BG bare ground" ~ "bare_ground", # oldname ~ newname
species == "ground" ~ "bare_ground",
species == "native_litter" ~ "litter",
species == "nonnative_thatch" ~ "thatch",
species == "Bromus diandrus BRDI" ~ "Bromus diandrus",
species == "Bromus rubens BRRU" ~ "Bromus rubens",
species == "Bromus hordeaceus BRHO" ~ "Bromus hordeaceus",
species == "Rapistrum rugosum - round pods" ~ "Rapistrum rugosum",
species == "HIIN Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Salvia lucophylla" ~ "Salvia leucophylla",
species == "Malacothamnus fasciculatus " ~ "Malacothamnus fasciculatus",
species == "dead HEAR" ~ "Heteromeles arbutifolia dead",
species == "dead MAFA" ~ "Malacothamnus fasciculatus dead",
species == "dead RHIL" ~ "Rhamnus ilicifolia dead",
species == "dead ARCA" ~ "Artemisia californica dead",
species == "dead SALE" ~ "Salvia leucophylla dead",
species == "ACGL Acmispon glaber" ~ "Acmispon glaber",
species == "Acmispon maritimus - round, sevfl" ~ "Acmispon maritimus",
species == "Acmispon strigosus - oval, sevfl" ~ "Acmispon strigosus",
TRUE ~ species)) %>%
mutate(
year = as.character(year),
site = as.character(site),
transect = as.character(transect),
distance = as.character(distance),
vertical = as.character(vertical),
species = as.character(species)
)
glimpse(abcover_full) # look at new columns
sort(unique(abcover_full$species))
shrub_leaftype <- read_excel("shrub_leaftype.xlsx")
print(sort(shrub_leaftype$species))
specieslist <- file_transect_2019_load %>%
dplyr::select(species, lifeform, status, lifecycle, family) %>%
mutate(status = case_when(status == "Native" ~ "native",
status == "Non-native" ~ "nonnative",
lifeform == "thatch" ~ "ground",
TRUE ~ status)) %>%
mutate(lifeform = case_when(lifeform == "Grass" ~ "grass",
lifeform == "Shrub" ~ "shrub",
lifeform == "Forb" ~ "forb",
lifeform == "thatch" ~ "ground",
TRUE ~ lifeform)) %>%
mutate(lifecycle = case_when(lifecycle == "Annual" ~ "annual",
lifecycle == "Perennial" ~ "perennial",
lifecycle == "thatch" ~ "ground",
TRUE ~ lifecycle)) %>%
mutate(family = case_when(family == "thatch" ~ "ground",
TRUE ~ family)) %>%
mutate(species = case_when(species == "BG bare ground" ~ "bare_ground", # oldname ~ newname
species == "ground" ~ "bare_ground",
species == "native_litter" ~ "litter",
species == "nonnative_thatch" ~ "thatch",
species == "Bromus diandrus BRDI" ~ "Bromus diandrus",
species == "Bromus rubens BRRU" ~ "Bromus rubens",
species == "Bromus hordeaceus BRHO" ~ "Bromus hordeaceus",
species == "Rapistrum rugosum - round pods" ~ "Rapistrum rugosum",
species == "HIIN Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Salvia lucophylla" ~ "Salvia leucophylla",
species == "Malacothamnus fasciculatus " ~ "Malacothamnus fasciculatus",
species == "dead HEAR" ~ "Heteromeles arbutifolia dead",
species == "dead MAFA" ~ "Malacothamnus fasciculatus dead",
species == "dead RHIL" ~ "Rhamnus ilicifolia dead",
species == "dead ARCA" ~ "Artemisia californica dead",
species == "dead SALE" ~ "Salvia leucophylla dead",
species == "ACGL Acmispon glaber" ~ "Acmispon glaber",
species == "Acmispon maritimus - round, sevfl" ~ "Acmispon maritimus",
species == "Acmispon strigosus - oval, sevfl" ~ "Acmispon strigosus",
TRUE ~ species)) %>%
distinct()
#View(specieslist)
sort(unique(specieslist$species))
specieslist <- file_transect_2019_load %>%
dplyr::select(species, lifeform, status, lifecycle, family) %>%
mutate(status = case_when(status == "Native" ~ "native",
status == "Non-native" ~ "nonnative",
lifeform == "thatch" ~ "ground",
TRUE ~ status)) %>%
mutate(lifeform = case_when(lifeform == "Grass" ~ "grass",
lifeform == "Shrub" ~ "shrub",
lifeform == "Forb" ~ "forb",
lifeform == "thatch" ~ "ground",
TRUE ~ lifeform)) %>%
mutate(lifecycle = case_when(lifecycle == "Annual" ~ "annual",
lifecycle == "Perennial" ~ "perennial",
lifecycle == "thatch" ~ "ground",
TRUE ~ lifecycle)) %>%
mutate(family = case_when(family == "thatch" ~ "ground",
TRUE ~ family)) %>%
mutate(species = case_when(species == "BG bare ground" ~ "bare_ground", # oldname ~ newname
species == "ground" ~ "bare_ground",
species == "native_litter" ~ "litter",
species == "nonnative_thatch" ~ "thatch",
species == "Bromus diandrus BRDI" ~ "Bromus diandrus",
species == "Bromus rubens BRRU" ~ "Bromus rubens",
species == "Bromus hordeaceus BRHO" ~ "Bromus hordeaceus",
species == "Rapistrum rugosum - round pods" ~ "Rapistrum rugosum",
species == "HIIN Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Salvia lucophylla" ~ "Salvia leucophylla",
species == "Malacothamnus fasciculatus " ~ "Malacothamnus fasciculatus",
species == "dead HEAR" ~ "Heteromeles arbutifolia dead",
species == "dead MAFA" ~ "Malacothamnus fasciculatus dead",
species == "dead RHIL" ~ "Rhamnus ilicifolia dead",
species == "dead ARCA" ~ "Artemisia californica dead",
species == "dead SALE" ~ "Salvia leucophylla dead",
species == "ACGL Acmispon glaber" ~ "Acmispon glaber",
species == "Acmispon maritimus - round, sevfl" ~ "Acmispon maritimus",
species == "Acmispon strigosus - oval, sevfl" ~ "Acmispon strigosus",
TRUE ~ species)) %>%
distinct()
#View(specieslist)
sort(unique(specieslist$species))
View(abcover_full)
View(specieslist)
View(abcover_full)
View(abcover_full)
View(file_transect_2019_load)
#View(specieslist)
sort(unique(specieslist$species))
dif <- setdiff(ab_species,species_species)
ab_species <- sort(unique(abcover_full$species))
species_species <- sort(unique(specieslist$species))
dif <- setdiff(ab_species,species_species)
dif
ab_species <- sort(unique(abcover_full$species))
species_species <- sort(unique(specieslist$species))
difab <- setdiff(ab_species,species_species)
difab
difsp <- setdiff(species_species,ab_species)
difsp
ab_species <- sort(unique(abcover_full$species))
species_species <- sort(unique(specieslist$species))
#These are the species that are in abcover_full that are NOT in the species list
difab <- setdiff(ab_species, species_species)
difab
#These are the species that are in the species list that are NOT in abcover_full
difsp <- setdiff(species_species, ab_species)
difsp
View(abcover_fulljoin_tib)
new.specieslist <- specieslist %>%
add_row(species = "",
lifeform = "",
status = "",
lifecyle = "",
family = "")
View(specieslist)
specieslist
new.specieslist <- specieslist %>%
add_row(species = "123",
lifeform = "456",
status = "8797",
lifecycle = "5643",
family = "51234")
View(new.specieslist)
View(specieslist)
new.specieslist <- new.specieslist %>%
mutate(species = case_when(family == "Mirabilis laevis var. crassifolia" ~ "Mirabilis laevis",
TRUE ~ family))
View(new.specieslist)
new.specieslist <- specieslist %>%
add_row(species = "",
lifeform = "",
status = "",
lifecycle = "",
family = "")
new.specieslist <- new.specieslist %>%
mutate(species = case_when(family == "Mirabilis laevis var. crassifolia" ~ "Mirabilis laevis",
TRUE ~ species))
new.specieslist <- new.specieslist %>%
mutate(species = case_when(species == "Mirabilis laevis var. crassifolia" ~ "Mirabilis laevis", TRUE ~ species))
write.csv(specieslist, "/specieslist.csv")
write.csv(specieslist, "/specieslist.csv")
write.csv(specieslist, "\specieslist.csv")
write.csv(specieslist, "/specieslist.csv")
write.csv(specieslist, "~/specieslist.csv")
fwrite(specieslist, "specieslist.csv")
setwd("~/GitHub/chaparraldegradation_2022")
write.csv(specieslist, file = "specieslist.csv")
