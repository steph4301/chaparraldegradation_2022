#
#          intact matrix
# matrix   0.26   -
# degraded 0.20   0.26  <-- no significant differences
#
# P value adjustment method: BH
#
# --- ERROR MESSAGE ---
# Warning: cannot compute exact p-value with ties
#
# From CHATGPT: The warning message you are seeing, "Warning: cannot compute exact p-value with ties," occurs when you are performing a statistical test that relies on exact p-values, such as the Mann-Whitney U test or the Kruskal-Wallis test, and there are tied values in your data. Tied values mean that there are two or more identical values in your dataset.
# When ties occur, the exact ranks of these tied values cannot be determined, leading to potential inaccuracies in the p-value calculation. Some statistical tests require exact ranks to compute p-values, so when ties are present, the software might issue a warning indicating that the p-value might not be exact.
# NON-NATVE
abcover_bylf_bystatus_nonnative <- abcover_bylf_bystatus %>%  # NON-NATIVE ONLY
filter(status == "nonnative")
shapiro.test(abcover_bylf_bystatus_nonnative$percentcover)
# 	Shapiro-Wilk normality test
#
# data:  abcover_bylf_bystatus_nonnative$percentcover
# W = 0.9056, p-value = 0.01551  <-- not normally distributed
kruskal.test(percentcover ~ standtype, data = abcover_bylf_bystatus_nonnative)
# Kruskal-Wallis rank sum test
#
# data:  percentcover by standtype
# Kruskal-Wallis chi-squared = 11.254, df = 2, p-value = 0.0036 <-- significantly different
pairwise.wilcox.test(abcover_bylf_bystatus_nonnative$percentcover, abcover_bylf_bystatus_nonnative$standtype,
p.adjust.method = "BH")
#          intact matrix
# matrix   0.078  -
# degraded 0.013  0.039 <-- significantly different
# Chunk 13: scatterplot native cover by nn grass cover
abcover_nativecover <- abcover_full_v %>%
na.omit() %>%
filter(status == "native") %>%
group_by(standtype, site_rep) %>%
dplyr::summarize(count_per_transect = length(unique(distance)),
percentcover_native = length(unique(distance))/41
)
view(abcover_nativecover)
cover_statuslf_matrix <- read.csv("percentcover_bystatus_bylifeform_matrix.csv", header = TRUE) %>% mutate(lifeform = case_when(lifeform == "herb" ~ "forb", TRUE ~ lifeform))
cover_statuslf_matrix <- cover_statuslf_matrix %>%
mutate(standtype = fct_relevel(standtype,
"intact", "matrix", "degraded"))
view(cover_statuslf_matrix_wide1)
abcover_nativecover_nngrasscover <- left_join(abcover_nativecover, cover_statuslf_matrix_wide1, by = "site_rep")
view(abcover_nativecover_nngrasscover)
formula6 <- abcover_nativecover_nngrasscover$percentcover_native ~ abcover_nativecover_nngrasscover$nonnative_grass
native_by_nngrass_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = nonnative_grass*100, y = percentcover_native*100, shape = standtype.x, color = standtype.x)) + #shape = standtype.x, color = standtype.x
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#  geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Native cover (%)",
title = "Total Native Cover by Non-native Grass Cover") +
theme_bw() +
stat_poly_line() +
#  stat_poly_eq(use_label(c("eq", "R2")))
stat_poly_eq(
aes(label = paste(after_stat(eq.label), stat(adj.rr.label), sep = "~~~~")),
formula = formula6,
parse=TRUE
)
print(native_by_nngrass_regression)
#write.csv(abcover_nativecover_nngrasscover,"processed/abcover_nativecover_nngrasscover.csv")
# Chunk 14: segmented scatterplot native shrub cover by nn grass cover
### SEGMENTED ###
p <- ggplot(abcover_nativecover_nngrasscover, aes(x = nonnative_grass, y = percentcover_native)) + geom_line()+
geom_point()
p
#create a linear model <-- from https://rpubs.com/MarkusLoew/12164
my.lm <- lm(nonnative_grass ~ percentcover_native, data = abcover_nativecover_nngrasscover)
summary(my.lm)
# Extract the coefficients from the overall model
my.coef <- coef(my.lm)
# add the regression line to the graph
# setting the aesthetics to a constant - this provides a name that we can reference later when we add additional layers
p <- p + geom_abline(intercept = my.coef[1],
slope = my.coef[2],
aes(colour = "overall"))
p
# -------------------
# analyse breakpoints
# -------------------
# http://cran.r-project.org/doc/Rnews/Rnews_2008-1.pdf
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(my.lm,
seg.Z = ~ nonnative_grass,  # x-axis
# psi = .4, .7
psi = list(percentcover_native = c(.1219,.829))
)
# get the slopes manually - excercise!!
my.slopes <- coef(my.seg)
my.seg <- segmented(my.lm, seg.Z = ~ nonnative_grass, psi = list(percentcover_native = c(.1, .7)))
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(my.lm,
seg.Z = ~ nonnative_grass,  # x-axis
# psi = .4, .7
psi = list(percentcover_native = c(.1219,.829))
)
native_by_nativeshrub_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = native_shrub*100, y = percentcover_native*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Native cover (%)",
title = "Total Native Cover by Natie Shrub Cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(native_by_nativeshrub_regression)
nativeforb_by_nativeshrub_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = native_shrub*100, y = native_forb*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Native forb cover (%)",
title = "Native forb cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nativeforb_by_nativeshrub_regression)
nativeforb_by_nngrass_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = nonnative_grass*100, y = native_forb*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Native forb cover (%)",
title = "Native forb cover x non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nativeforb_by_nngrass_regression)
nncover_nativeshrub <- ggplot(data = abcover_nonnativecover_nngrasscover,
aes(x = native_shrub*100, y = percentcover_nonnative*100, shape = standtype.x, color = standtype.x)) + #shape = standtype.x, color = standtype.x
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Total non-native cover (%)",
title = "Total non-native cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
nativeforb_by_nativeshrub_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = native_shrub*100, y = native_forb*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Native forb cover (%)",
title = "Native forb cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nativeforb_by_nativeshrub_regression)
nativeforb_by_nngrass_regression <- ggplot(data = abcover_nativecover_nngrasscover,
aes(x = nonnative_grass*100, y = native_forb*100, shape = standtype.x, color = standtype.x)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Native forb cover (%)",
title = "Native forb cover x non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nativeforb_by_nngrass_regression)
nncover_nativeshrub <- ggplot(data = abcover_nonnativecover_nngrasscover,
aes(x = native_shrub*100, y = percentcover_nonnative*100, shape = standtype.x, color = standtype.x)) + #shape = standtype.x, color = standtype.x
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Total non-native cover (%)",
title = "Total non-native cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
abcover_nonnativecover_nngrasscover <- left_join(abcover_nonnative_cover, cover_statuslf_matrix_wide1, by = "site_rep")
abcover_nonnative_cover <- abcover_full_v %>%
na.omit() %>%
filter(status == "nonnative") %>%
group_by(standtype, site_rep) %>%
dplyr::summarize(count_per_transect = length(unique(distance)),
percentcover_nonnative = length(unique(distance))/41
)
abcover_nonnativecover_nngrasscover <- left_join(abcover_nonnative_cover, cover_statuslf_matrix_wide1, by = "site_rep")
nnnative_by_nngrass_regression <- ggplot(data = abcover_nonnativecover_nngrasscover,
aes(x = nonnative_grass*100, y = percentcover_nonnative*100), shape = standtype.x, color = standtype.x) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
#geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Non-native cover (%)",
title = "Total Native Cover by Non-native Grass Cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
nncover_nativeshrub <- ggplot(data = abcover_nonnativecover_nngrasscover,
aes(x = native_shrub*100, y = percentcover_nonnative*100, shape = standtype.x, color = standtype.x)) + #shape = standtype.x, color = standtype.x
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Total non-native cover (%)",
title = "Total non-native cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nncover_nativeshrub)
nngrass_nativeshrub <- ggplot(data = abcover_nonnativecover_nngrasscover,
aes(x = native_shrub*100, y = nonnative_grass*100, shape = standtype.x, color = standtype.x)) + #shape = standtype.x, color = standtype.x
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 100)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Native shrub cover (%)",
y = "Non-native grass cover (%)",
title = "Non-native grass cover x native shrub cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(nngrass_nativeshrub)
### SEGMENTED ###
p1 <- ggplot(abcover_nonnativecover_nngrasscover, aes(x = nonnative_grass, y = percentcover_nonnative)) + geom_line()+
geom_point()
p1
### SEGMENTED ###
p1 <- ggplot(abcover_nonnativecover_nngrasscover, aes(x = nonnative_grass, y = percentcover_nonnative)) + geom_line()+
geom_point()
p1
#create a linear model <-- from https://rpubs.com/MarkusLoew/12164
my.lm.nnnative_by_nngrass_regression <- lm(nonnative_grass ~ percentcover_nonnative, data = abcover_nonnativecover_nngrasscover)
summary(my.lm.nnnative_by_nngrass_regression)
# Extract the coefficients from the overall model
my.coef.my.lm.nnnative_by_nngrass_regression <- coef(my.lm.nnnative_by_nngrass_regression)
# add the regression line to the graph
# setting the aesthetics to a constant - this provides a name that we can reference later when we add additional layers
p1 <- p1 + geom_abline(intercept = my.coef.my.lm.nnnative_by_nngrass_regression[1],
slope = my.coef.my.lm.nnnative_by_nngrass_regression[2],
aes(colour = "overall"))
p1
# -------------------
# analyse breakpoints
# -------------------
# http://cran.r-project.org/doc/Rnews/Rnews_2008-1.pdf
library(segmented)
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(my.lm.nnnative_by_nngrass_regression,
seg.Z = ~ nonnative_grass,  # x-axis
psi = c(.75)
#                    psi = list(percentcover_nonnative = c(.5))
)
# When not providing estimates for the breakpoints "psi = NA" can be used.
# The number of breakpoints that will show up is not defined
#my.seg <- segmented(my.lm,
#                    seg.Z = ~ DistanceMeters,
#                    psi = NA)
# display the summary
summary(my.seg)
# get the breakpoints
my.seg$psi
# get the slopes
slope(my.seg)
# get the slopes manually - excercise!!
my.slopes <- coef(my.seg)
# first line:
#y = b0 + b1*x
#y = intercept1 + slope1 * x
# second line:
#y = c0 + c1*x
#y = intercept2 + slope2 * x
# third line
#y = d0 + d1 *x
#y = intercept3 + slope3 * x
# At the breakpoint (break1), the segments b and c intersect
#b0 + b1*x = c0 + c1*x
b0 <- coef(my.seg)[[1]]
b1 <- coef(my.seg)[[2]]
# Important:
# the coefficients are the differences in slope in comparison to the previous slope
c1 <- coef(my.seg)[[2]] + coef(my.seg)[[3]]
break1 <- my.seg$psi[[3]]
#Solve for c0 (intercept of second segment):
c0 <- b0 + b1 * break1 - c1 * break1
# At the breakpoint (break2), the two lines are the same again:
# the coefficients are the differences in slope in comparison to the previous slope
d1 <- coef(my.seg)[[4]] + c1
break2 <- my.seg$psi[[4]]
### SEGMENTED ###
p1 <- ggplot(abcover_nonnativecover_nngrasscover, aes(x = nonnative_grass, y = percentcover_nonnative)) + geom_line()+
geom_point()
p1
#create a linear model <-- from https://rpubs.com/MarkusLoew/12164
my.lm.nnnative_by_nngrass_regression <- lm(nonnative_grass ~ percentcover_nonnative, data = abcover_nonnativecover_nngrasscover)
summary(my.lm.nnnative_by_nngrass_regression)
# Extract the coefficients from the overall model
my.coef.my.lm.nnnative_by_nngrass_regression <- coef(my.lm.nnnative_by_nngrass_regression)
# add the regression line to the graph
# setting the aesthetics to a constant - this provides a name that we can reference later when we add additional layers
p1 <- p1 + geom_abline(intercept = my.coef.my.lm.nnnative_by_nngrass_regression[1],
slope = my.coef.my.lm.nnnative_by_nngrass_regression[2],
aes(colour = "overall"))
p1
# -------------------
# analyse breakpoints
# -------------------
# http://cran.r-project.org/doc/Rnews/Rnews_2008-1.pdf
library(segmented)
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(my.lm.nnnative_by_nngrass_regression,
seg.Z = ~ nonnative_grass,  # x-axis
psi = c(.75)
#                    psi = list(percentcover_nonnative = c(.5))
)
# When not providing estimates for the breakpoints "psi = NA" can be used.
# The number of breakpoints that will show up is not defined
#my.seg <- segmented(my.lm,
#                    seg.Z = ~ DistanceMeters,
#                    psi = NA)
# display the summary
summary(my.seg)
# get the breakpoints
my.seg$psi
# get the slopes
slope(my.seg)
# get the slopes manually - excercise!!
my.slopes <- coef(my.seg)
# first line:
#y = b0 + b1*x
#y = intercept1 + slope1 * x
# second line:
#y = c0 + c1*x
#y = intercept2 + slope2 * x
# third line
#y = d0 + d1 *x
#y = intercept3 + slope3 * x
# At the breakpoint (break1), the segments b and c intersect
#b0 + b1*x = c0 + c1*x
b0 <- coef(my.seg)[[1]]
b1 <- coef(my.seg)[[2]]
# Important:
# the coefficients are the differences in slope in comparison to the previous slope
c1 <- coef(my.seg)[[2]] + coef(my.seg)[[3]]
break1 <- my.seg$psi[[3]]
#Solve for c0 (intercept of second segment):
c0 <- b0 + b1 * break1 - c1 * break1
# At the breakpoint (break2), the two lines are the same again:
# the coefficients are the differences in slope in comparison to the previous slope
d1 <- coef(my.seg)[[4]] + c1
break2 <- my.seg$psi[[4]]
### SEGMENTED ###
p1 <- ggplot(abcover_nonnativecover_nngrasscover, aes(x = nonnative_grass, y = percentcover_nonnative)) + geom_line()+
geom_point()
p1
#create a linear model <-- from https://rpubs.com/MarkusLoew/12164
my.lm.nnnative_by_nngrass_regression <- lm(nonnative_grass ~ percentcover_nonnative, data = abcover_nonnativecover_nngrasscover)
summary(my.lm.nnnative_by_nngrass_regression)
# Extract the coefficients from the overall model
my.coef.my.lm.nnnative_by_nngrass_regression <- coef(my.lm.nnnative_by_nngrass_regression)
# add the regression line to the graph
# setting the aesthetics to a constant - this provides a name that we can reference later when we add additional layers
p1 <- p1 + geom_abline(intercept = my.coef.my.lm.nnnative_by_nngrass_regression[1],
slope = my.coef.my.lm.nnnative_by_nngrass_regression[2],
aes(colour = "overall"))
p1
# -------------------
# analyse breakpoints
# -------------------
# http://cran.r-project.org/doc/Rnews/Rnews_2008-1.pdf
library(segmented)
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(my.lm.nnnative_by_nngrass_regression,
seg.Z = ~ nonnative_grass,  # x-axis
psi = c(.75)
#                    psi = list(percentcover_nonnative = c(.5))
)
# When not providing estimates for the breakpoints "psi = NA" can be used.
# The number of breakpoints that will show up is not defined
#my.seg <- segmented(my.lm,
#                    seg.Z = ~ DistanceMeters,
#                    psi = NA)
# display the summary
summary(my.seg)
# get the breakpoints
my.seg$psi
# get the slopes
slope(my.seg)
# get the slopes manually - excercise!!
my.slopes <- coef(my.seg)
# first line:
#y = b0 + b1*x
#y = intercept1 + slope1 * x
# second line:
#y = c0 + c1*x
#y = intercept2 + slope2 * x
# third line
#y = d0 + d1 *x
#y = intercept3 + slope3 * x
# At the breakpoint (break1), the segments b and c intersect
#b0 + b1*x = c0 + c1*x
b0 <- coef(my.seg)[[1]]
b1 <- coef(my.seg)[[2]]
# Important:
# the coefficients are the differences in slope in comparison to the previous slope
c1 <- coef(my.seg)[[2]] + coef(my.seg)[[3]]
break1 <- my.seg$psi[[3]]
#Solve for c0 (intercept of second segment):
c0 <- b0 + b1 * break1 - c1 * break1
# At the breakpoint (break2), the two lines are the same again:
# the coefficients are the differences in slope in comparison to the previous slope
d1 <- coef(my.seg)[[4]] + c1
break2 <- my.seg$psi[[4]]
#Solve for d0 (intercept of third segment):
d0 <- c0 + c1 * break2 - d1 * break2
# line before first breakpoint
p1 <- p1 + geom_abline(intercept = b0, slope = b1,
aes(colour = "first part"), show_guide = TRUE)
p1
p1
p1 <- p1 + geom_vline(xintercept = my.lines, linetype = "dashed")
p1
# add vertical lines to indicate the break locations
# second row of the psi-matrix
my.lines <- my.seg$psi[, 2]
p1 <- p1 + geom_vline(xintercept = my.lines, linetype = "dashed")
p1
