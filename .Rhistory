# group_3 colors
cal_palette(name = "grassdry", n = 5, type = "continuous")
grass <- "#E1BC8D"
css <- "#66512A"
chap <- "#4C5454"
# group_4 colors
cal_palette(name = "grassdry", n = 5, type = "continuous")
d <- "#E1BC8D"
c <- "#765635"
b <- "#5B4E23"
a <- "#4C5454"
colors_4 <- c(a, b, c, d)
cal_palette(name = "creek", n = 15, type = "continuous")
"#EBDAC9" "#E0C9B6" "#D6B9A4" "#CEAF9A" "#CEBBB0"
extracted_load <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022/chaparraldegradation_2022/Extracted_Elevation_Slope_Aspect_Hillshade_20m.csv", header = TRUE, na.strings=c("","NA"))
extracted <- extracted_load%>%
dplyr::select(!c(system.index, ID, .geo, aspect)) %>% # omit aspect because INT transects cross from 21 to 350 degrees
rename(transect_ID = system_ind,
elevation_m = elevation,
slope_degrees = slope
) %>%
# “southwest-ness” is calculated using: cos (aspect - 225°)
mutate(transect_ID = case_when(transect_ID == "1.1" ~ "1.10", # old ~ new
transect_ID == "2.1" ~ "2.10",
transect_ID == "2.2" ~ "2.20",
TRUE ~ transect_ID)) %>%
mutate(
southwestness = as.numeric(southwestness),
elevation_m = as.integer(elevation_m),
slope_degrees = as.numeric(slope_degrees),
group_15 = as.character(group_15),
group_10 = as.character(group_10),
group_6 = as.character(group_6),
group_4 = as.character(group_4),
group_2 = as.character(group_2),
transect_ID = as.character(transect_ID),
fire_history = as.integer(fire_history),
twi = as.numeric(twi),
lat = as.numeric(lat),
long = as.numeric(long)
)   %>%
mutate(group_typeconvert = factor(
group_typeconvert, levels = c("chaparral", "css", "grass")
)
) %>%
mutate(group_2 = factor(
group_2, levels = c("HEAR", "no HEAR")
)
) %>%
mutate(group_4 = factor(
group_4, levels = c("HEAR+CEOL", "HEAR", "SALE+MAFA+ARCA", "PHHU")
)
) %>%
mutate(group_6 = factor(
group_6, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME",
"SALE+MAFA+ARCA+HIIN",
"PHHU", "PHHU+RARU")
)
) %>%
mutate(group_10 = factor(
group_10, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME+BRDI",
"SALE+MAFA+ARCA+STLE+CEME+Erodium_spp.",
"SALE+MAFA+ARCA+HIIN+BRHO+CEME",
"SALE+MAFA+ARCA+HIIN+Erodium_spp.",
"PHHU",
"PHHU+BRDI",
"PHHU+ARCA",
"PHHU+RARU")
)
) %>%
mutate(group_15 = factor(
group_15, levels = c("1", "2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10", "11", "12", "13", "14", "15")
)
)
extracted_load <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022/chaparraldegradation_2022/Extracted_Elevation_Slope_Aspect_Hillshade_20m.csv", header = TRUE, na.strings=c("","NA"))
extracted <- extracted_load%>%
dplyr::select(!c(system.index, ID, .geo, aspect)) %>% # omit aspect because INT transects cross from 21 to 350 degrees
rename(transect_ID = system_ind,
elevation_m = elevation,
slope_degrees = slope
) %>%
# “southwest-ness” is calculated using: cos (aspect - 225°)
mutate(transect_ID = case_when(transect_ID == "1.1" ~ "1.10", # old ~ new
transect_ID == "2.1" ~ "2.10",
transect_ID == "2.2" ~ "2.20",
TRUE ~ transect_ID)) %>%
mutate(
southwestness = as.numeric(southwestness),
elevation_m = as.integer(elevation_m),
slope_degrees = as.numeric(slope_degrees),
group_15 = as.character(group_15),
group_10 = as.character(group_10),
group_6 = as.character(group_6),
group_4 = as.character(group_4),
group_2 = as.character(group_2),
transect_ID = as.character(transect_ID),
fire_history = as.integer(fire_history),
twi = as.numeric(twi),
lat = as.numeric(lat),
long = as.numeric(long)
)   %>%
mutate(group_typeconvert = factor(
group_typeconvert, levels = c("chaparral", "css", "grass")
)
) %>%
mutate(group_2 = factor(
group_2, levels = c("HEAR", "no HEAR")
)
) %>%
mutate(group_4 = factor(
group_4, levels = c("HEAR+CEOL", "HEAR", "SALE+MAFA+ARCA", "PHHU")
)
) %>%
mutate(group_6 = factor(
group_6, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME",
"SALE+MAFA+ARCA+HIIN",
"PHHU", "PHHU+RARU")
)
) %>%
mutate(group_10 = factor(
group_10, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME+BRDI",
"SALE+MAFA+ARCA+STLE+CEME+Erodium_spp.",
"SALE+MAFA+ARCA+HIIN+BRHO+CEME",
"SALE+MAFA+ARCA+HIIN+Erodium_spp.",
"PHHU",
"PHHU+BRDI",
"PHHU+ARCA",
"PHHU+RARU")
)
) %>%
mutate(group_15 = factor(
group_15, levels = c("1", "2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10", "11", "12", "13", "14", "15")
)
)
view(extracted_load)
extracted <- extracted_load%>%
dplyr::select(!c(system.index, ID, .geo, aspect)) %>% # omit aspect because INT transects cross from 21 to 350 degrees
rename(transect_ID = system_ind,
elevation_m = elevation,
slope_degrees = slope
) %>%
# “southwest-ness” is calculated using: cos (aspect - 225°)
mutate(transect_ID = case_when(transect_ID == "1.1" ~ "1.10", # old ~ new
transect_ID == "2.1" ~ "2.10",
transect_ID == "2.2" ~ "2.20",
TRUE ~ transect_ID)) %>%
mutate(
southwestness = as.numeric(southwestness),
elevation_m = as.integer(elevation_m),
slope_degrees = as.numeric(slope_degrees),
group_15 = as.character(group_15),
group_10 = as.character(group_10),
group_6 = as.character(group_6),
group_4 = as.character(group_4),
group_3 = as.character(group_3),
group_2 = as.character(group_2),
transect_ID = as.character(transect_ID),
fire_history = as.integer(fire_history),
twi = as.numeric(twi),
lat = as.numeric(lat),
long = as.numeric(long)
)   %>%
mutate(group_3 = factor(
group_typeconvert, levels = c("chaparral", "css", "grass")
)
) %>%
mutate(group_2 = factor(
group_2, levels = c("HEAR", "no HEAR")
)
) %>%
mutate(group_4 = factor(
group_4, levels = c("HEAR+CEOL", "HEAR", "SALE+MAFA+ARCA", "PHHU")
)
) %>%
mutate(group_6 = factor(
group_6, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME",
"SALE+MAFA+ARCA+HIIN",
"PHHU", "PHHU+RARU")
)
) %>%
mutate(group_10 = factor(
group_10, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME+BRDI",
"SALE+MAFA+ARCA+STLE+CEME+Erodium_spp.",
"SALE+MAFA+ARCA+HIIN+BRHO+CEME",
"SALE+MAFA+ARCA+HIIN+Erodium_spp.",
"PHHU",
"PHHU+BRDI",
"PHHU+ARCA",
"PHHU+RARU")
)
) %>%
mutate(group_15 = factor(
group_15, levels = c("1", "2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10", "11", "12", "13", "14", "15")
)
)
extracted <- extracted_load%>%
dplyr::select(!c(system.index, ID, .geo, aspect)) %>% # omit aspect because INT transects cross from 21 to 350 degrees
rename(transect_ID = system_ind,
elevation_m = elevation,
slope_degrees = slope
) %>%
# “southwest-ness” is calculated using: cos (aspect - 225°)
mutate(transect_ID = case_when(transect_ID == "1.1" ~ "1.10", # old ~ new
transect_ID == "2.1" ~ "2.10",
transect_ID == "2.2" ~ "2.20",
TRUE ~ transect_ID)) %>%
mutate(
southwestness = as.numeric(southwestness),
elevation_m = as.integer(elevation_m),
slope_degrees = as.numeric(slope_degrees),
group_15 = as.character(group_15),
group_10 = as.character(group_10),
group_6 = as.character(group_6),
group_4 = as.character(group_4),
group_3 = as.character(group_3),
group_2 = as.character(group_2),
transect_ID = as.character(transect_ID),
fire_history = as.integer(fire_history),
twi = as.numeric(twi),
lat = as.numeric(lat),
long = as.numeric(long)
)   %>%
mutate(group_3 = factor(
group_3, levels = c("chaparral", "css", "grass")
)
) %>%
mutate(group_2 = factor(
group_2, levels = c("HEAR", "no HEAR")
)
) %>%
mutate(group_4 = factor(
group_4, levels = c("HEAR+CEOL", "HEAR", "SALE+MAFA+ARCA", "PHHU")
)
) %>%
mutate(group_6 = factor(
group_6, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME",
"SALE+MAFA+ARCA+HIIN",
"PHHU", "PHHU+RARU")
)
) %>%
mutate(group_10 = factor(
group_10, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME+BRDI",
"SALE+MAFA+ARCA+STLE+CEME+Erodium_spp.",
"SALE+MAFA+ARCA+HIIN+BRHO+CEME",
"SALE+MAFA+ARCA+HIIN+Erodium_spp.",
"PHHU",
"PHHU+BRDI",
"PHHU+ARCA",
"PHHU+RARU")
)
) %>%
mutate(group_15 = factor(
group_15, levels = c("1", "2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10", "11", "12", "13", "14", "15")
)
)
hist(extracted$southwestness) # southwestness
# -1
# 1
ggqqplot(extracted$southwestness)
# -1
# 1
ggqqplot(extracted$southwestness)
library(here) # similar to set working directory
library(tidyverse) # data wrangling - includes ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats
library(ggplot2)
library(plotly)
# -1
# 1
ggqqplot(extracted$southwestness)
# -1
# 1
ggqplot(extracted$southwestness)
extracted %>%
group_by(group_4) %>%
summarise(
southwestness_N = length(southwestness),
southwestness_mean = mean(southwestness),
southwestness_SE = round(((sd(southwestness))/sqrt(length((southwestness)))),2)
)
ggplot(data = extracted,
aes(y = southwestness, x = group_4)) +
# geom_point() +
geom_boxplot() +
theme_classic() +
labs(x = "Community Groups (n = 4)",
y = "Southwestness (-1 = northeast, 1 = southwest)",
title = "Community Groups by Southwestness")
ggplot(data = extracted,
aes(y = southwestness, x = group_9)) +
geom_boxplot() +
theme_classic() +
labs(x = "Community Groups (n = 9)",
y = "Southwestness (-1 = northeast, 1 = southwest)",
title = "Community Groups by Southwestness") +
scale_x_discrete(guide = guide_axis(angle = 45)) +
ylim(-1, 1)
ggplot(data = extracted,
aes(y = southwestness, x = group_4)) +
# geom_point() +
geom_boxplot() +
theme_classic() +
labs(x = "Community Groups (n = 4)",
y = "Southwestness (-1 = northeast, 1 = southwest)",
title = "Community Groups by Southwestness")
ggplot(data = extracted,
aes(y = southwestness, x = group_10)) +
geom_boxplot() +
theme_classic() +
labs(x = "Community Groups (n = 10)",
y = "Southwestness (-1 = northeast, 1 = southwest)",
title = "Community Groups by Southwestness") +
scale_x_discrete(guide = guide_axis(angle = 45)) +
ylim(-1, 1)
hist(extracted$slope_degrees) # slope
ggqqplot(extracted$slope_degrees)
shapiro.test(extracted$slope_degrees)
extracted %>%
group_by(group_4) %>%
summarise(
slope_N = length(slope_degrees),
slope_mean = mean(slope_degrees),
slope_SE = round(((sd(slope_degrees))/sqrt(length((slope_degrees)))),2)
)
summary(aov(slope_degrees ~ group_4, data = extracted))
TukeyHSD((aov(slope_degrees ~ group_4, data = extracted)))
plot(TukeyHSD((aov(slope_degrees ~ group_4, data = extracted))))
boxplot(slope_degrees ~ group_4,
data = extracted)
ggplot(data = extracted,
aes(y = slope_degrees, x = group_4)) +
# geom_point() +
geom_boxplot() +
theme_classic()
library(here) # similar to set working directory
library(tidyverse) # data wrangling - includes ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats
library(rpart) # for classification and regression trees
library(rpart.plot)
extracted_load <- read.csv("~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022/chaparraldegradation_2022/Extracted_Elevation_Slope_Aspect_Hillshade_20m.csv", header = TRUE, na.strings=c("","NA"))
extracted <- extracted_load%>%
dplyr::select(!c(system.index, ID, .geo)) %>%
rename(transect_ID = system_ind,
aspect_degrees = aspect,
elevation_m = elevation,
slope_degrees = slope
) %>%
filter(transect_ID != "1.03") %>%
# “southwest-ness” is calculated using: cos (aspect - 225°)
mutate(transect_ID = case_when(transect_ID == "1.1" ~ "1.10", # old ~ new
transect_ID == "2.1" ~ "2.10",
transect_ID == "2.2" ~ "2.20",
TRUE ~ transect_ID)) %>%
mutate(
aspect_degrees = as.numeric(aspect_degrees),
elevation_m = as.integer(elevation_m),
slope_degrees = as.numeric(slope_degrees),
group_15 = as.character(group_15),
group_3 = as.character(group_3),
group_10 = as.character(group_10),
group_6 = as.character(group_6),
group_4 = as.character(group_4),
group_2 = as.character(group_2),
transect_ID = as.character(transect_ID),
fire_history = as.integer(fire_history),
twi = as.numeric(twi)
) %>%
mutate(group_3 = factor(
group_3, levels = c("chaparral", "css", "grass")
)
) %>%
mutate(group_2 = factor(
group_2, levels = c("HEAR", "no HEAR")
)
) %>%
mutate(group_4 = factor(
group_4, levels = c("HEAR+CEOL",
"HEAR",
"SALE+MAFA+ARCA",
"PHHU")
)
) %>%
mutate(group_6 = factor(
group_6, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME",
"SALE+MAFA+ARCA+HIIN",
"PHHU", "PHHU+RARU")
)
) %>%
mutate(group_10 = factor(
group_10, levels = c("HEAR+CEOL", "HEAR",
"SALE+MAFA+ARCA+STLE+CEME+BRDI",
"SALE+MAFA+ARCA+STLE+CEME+Erodium_spp.",
"SALE+MAFA+ARCA+HIIN+BRHO+CEME",
"SALE+MAFA+ARCA+HIIN+Erodium_spp.",
"PHHU",
"PHHU+BRDI",
"PHHU+ARCA",
"PHHU+RARU")
)
) %>%
mutate(group_15 = factor(
group_15, levels = c("1", "2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10", "11", "12", "13", "14", "15")
)
)
shuffle_index <- sample(1:nrow(extracted))
head(shuffle_index)
tree_model <- rpart(group_15 ~ slope_degrees + elevation_m + southwestness, data = extracted, method = "class", control = rpart.control(minsplit = 5, minbucket = 1))
tree_model
rpart.plot(tree_model, type = 3, extra = 102, fallen.leaves = TRUE)
train_index <- sample(1:nrow(extracted), 0.7 * nrow(extracted))
train_data <- extracted[train_index, ]
test_data <- extracted[-train_index, ]
tree_model <- rpart(group_15 ~ slope_degrees + elevation_m + southwestness, data = train_data, method = "class")
pred <- predict(tree_model, test_data, type = "class")
confusion_matrix <- table(Predicted = pred, Actual = test_data$group_15)
print(confusion_matrix)
# with Cross-Validation - instead of shuffling the transects
install.packages("caret")
# with Cross-Validation - instead of shuffling the transects
#install.packages("caret")
library(caret) # for a small dataset
set.seed(123)  # For reproducibility
k <- 10  # Number of folds
folds <- sample(1:k, nrow(extracted), replace = TRUE)
# Store accuracy results for each fold
accuracy_results <- numeric(k)
models <- list() # Initialize a list to store models from each fold
for (i in 1:k) { # function
# Split data into training and validation sets
train_data <- extracted[folds != i, ]
validation_data <- extracted[folds == i, ]
# Build the classification tree model on the training set
tree_model <- rpart(group_15 ~ slope_degrees + elevation_m + southwestness,
data = train_data,
method = "class")
# Predict on the validation set
predictions <- predict(tree_model, validation_data, type = "class")
# Calculate accuracy for the current fold
accuracy <- mean(predictions == validation_data$group_15)
accuracy_results[i] <- accuracy
models[[i]] <- tree_model
}
# Calculate the average accuracy across all folds
mean_accuracy <- mean(accuracy_results)
print(paste("Mean Accuracy across", k, "folds:", round(mean_accuracy, 3))) # [1] "Mean Accuracy across 10 folds: 0.166" = 16.6% by my classification tree. Random guessing is 1/15 = 6.7%... so my model is better, but still not great
# Visualize the tree from one of the folds (e.g., the first fold)
selected_model <- models[[1]]
# Plot the tree
rpart.plot(selected_model,
type = 2,  # Type of plot (0-4), 2 is standard
extra = 104,  # Display probability at each leaf
under = TRUE,  # Display the split criterion below each node
main = "Classification Tree for Fold 1")
tree_model <- rpart(group_15 ~ slope_degrees + elevation_m + southwestness, data = validation_data, method = "class", control = rpart.control(minsplit = 5, minbucket = 1))
# Print the model summary
print(tree_model)
rpart.plot(tree_model, type = 3, extra = 102, fallen.leaves = TRUE)
pred <- predict(tree_model, extracted, type = "class")
table(Predicted = pred, Actual = extracted$group_15)
# Optional: Cross-validation
printcp(tree_model)
# Prune the tree
pruned_tree <- prune(tree_model, cp = tree_model$cptable[which.min(tree_model$cptable[,"xerror"]),"CP"])
# Visualize the pruned tree
rpart.plot(pruned_tree, type = 3, extra = 102, fallen.leaves = TRUE) # can't prune because there are only three groups predicted
