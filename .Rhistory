<<<<<<< Updated upstream
abcover_family_native + abcover_family_nonnative
print(abcover_family_native + abcover_family_nonnative)
print(abcover_family_native+abcover_family_nonnative)
par(mfrow = c(1, 2))
abcover_family_native
abcover_family_nonnative
par(mfrow = c(1, 2))
abcover_family_native
abcover_family_nonnative
par(mfrow = c(1, 2))
ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "native"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "nonnative"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "native"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "nonnative"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
combined_plots_abcoverfamily <- abcover_family_native + abcover_family_nonnative + plot_layout(ncol = 2)
#this is the percents we calculated - native
abcover_family_native <- ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "native"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#this is the percents we calculated - nonnative
abcover_family_nonnative <- ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "nonnative"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
combined_plots_abcoverfamily <- abcover_family_native + abcover_family_nonnative + plot_layout(ncol = 2)
combined_plots_abcoverfamily <- abcover_family_native + abcover_family_nonnative
#this is the percents we calculated - native
abcover_family_native <- ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "native"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#this is the percents we calculated - nonnative
ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "nonnative"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#this is the percents we calculated - native
ggplot(abcover_byfamily_percent %>%
dplyr::filter(status == "native"),
aes(fill=family, y=percent_cover, x=site_rep)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Percent Cover by Count") +
labs(x="Transect", y="Percent Cover") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
knitr::opts_chunk$set(echo = TRUE)
unique(abcover_byspecies$species)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # includes ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats
library(ggplot2) # data visualization
library(readr)
library(dplyr)
library(ggpubr) # customize ggplot2 for publication
library(broom)
library(AICcmodavg)
library(vegan)
library(readxl) # for .xls and .xlsx sheets
library(janitor)
library(calecopal)
library(multcompView)
library(plotly)
if (!require(devtools)) {
install.packages("devtools")
}
devtools::install_github("gavinsimpson/ggvegan")
library(here)
# Stand colors: INTACT, MATRIX, DEGRADED
cal_palette(name = "chaparral3", n = 3, type = "continuous")
deg <- "#D3E3CA"
mat <- "#92A587"
int <- "#2F3525"
standcolors <- c(int, mat, deg)
# Lifeform colors: shrub, grass, forb
cal_palette(name = "chaparral3", n = 3, type = "continuous")
shrub <- "#D3E3CA"
grass <- "#92A587"
forb <- "#2F3525"
lifeformcolors <- c(int, mat, deg)
# Status colors: native, exotic
cal_palette(name = "chaparral1", n = 6, type = "continuous")
native <- "#AEBFA8"
exotic <- "#F19B34"
statuscolors <- c(native, exotic)
# percent cover
abcover_full_raw <- read.csv("deg_percentcover_byspecies_bylifeform.csv", header = TRUE, na.strings=c("","NA"))
abcover_full_raw <- abcover_full_raw %>% dplyr::select(!c(species.1))
glimpse(abcover_full_raw) # point-intercept transect data
names(abcover_full_raw)
sort(unique(abcover_full_raw$species))
glimpse(abcover_full_raw %>%  na.omit())
# Rows: 2,063
# Columns: 10
# Renaming observations
ab_diversity <- abcover_full_raw %>%
#dplyr::select(!c(species == "bare_ground"))
mutate(species = case_when(
species == "Avena barbata dead" ~ "Avena barbata",
species == "Bromus diandrus dead" ~ "Bromus diandrus",
species == "Bromus rubens dead" ~ "Bromus rubens",
species == "Bromus spp." ~ "Bromus rubens",
species == "Bromus spp. dead" ~ "Bromus rubens",
species == "Bromus madritensis" ~ "Bromus rubens",
species == "Centaurea melitensis dead" ~ "Centaurea melitensis",
species == "Erodium cicutarium" ~ "Erodium spp.",
species == "Elymus condensatus dead" ~ "Elymus condensatus",
species == "Heteromeles arbutifolia dead" ~ "Heteromeles arbutifolia",
species == "Hirschfeldia incana dead" ~ "Hirschfeldia incana",
species == "Malacothamnus fasciculatus dead" ~ "Malacothamnus fasciculatus",
species == "Salvia leucophylla dead" ~ "Salvia leucophylla",
species == "Stipa lepida dead" ~ "Stipa lepida",
TRUE ~ as.character(species)  # Keep other observations unchanged
)) %>%
mutate(site = case_when(
site == "Intact_1" ~ "Intact1",
site == "Intact_2" ~ "Intact2",
site == "Intact_3" ~ "Intact3",
TRUE ~ as.character(site)  # Keep other observations unchanged
)) %>%
mutate(standtype = fct_relevel(standtype,
"intact", "matrix", "degraded")) %>%
mutate(site = fct_relevel(site,
"Intact1", "Intact2", "Intact3", "ENH1",    "ENH2", "DEG1",    "DEG2")) %>%
filter(species !="native_litter" ) %>%
filter(species != "nonnative_thatch") %>%
filter(species != "bare_ground")
sort(unique(ab_diversity$species))
sort(unique(ab_diversity$site))
glimpse(ab_diversity)
#Rows: 1,450
#Columns: 10
# combine site and rep to one column
ab_diversity$site_rep <- paste(ab_diversity$site, ab_diversity$rep, sep="_")
ab_diversity$site_rep_species <- paste(ab_diversity$site_rep, ab_diversity$species, sep="_")
sort(unique(ab_diversity$site_rep))
#"DEG1_1"    "DEG1_2"    "DEG1_3"    "DEG2_4"    "DEG2_5"    "DEG2_6"
#"ENH1_1"    "ENH1_2"    "ENH1_3"    "ENH2_4"    "ENH2_5"    "ENH2_6"
#"Intact1_1" "Intact2_2" "Intact3_3"
glimpse(ab_diversity)  # species diversity from point-line intercept transect
# Rows: 1,445
#Columns: 10
ab_diversity <- ab_diversity %>%
dplyr::select(!c(distance, vertical))
# write.csv(ab_diversity, "processed/ab_diversity.csv")
ab_diversity # species richness from point intercept transects
sort(unique(ab_diversity$site_rep))
# "DEG1_1"    "DEG1_2"    "DEG1_3"    "DEG2_4"    "DEG2_5"    "DEG2_6"    "ENH1_1"    "ENH1_2"    "ENH1_3"    "ENH2_4"    "ENH2_5"    "ENH2_6"
#"Intact1_1" "Intact2_2" "Intact3_3"
glimpse(ab_diversity)
# Rows: 1,450
# Columns: 10
nativecover <- read.csv("processed/abcover_nativecover_nngrasscover.csv") # native percent cover from ch1_standdeg_canopy.Rmd
sort(unique(nativecover$site_rep))
# "DEG1_1"     "DEG1_2"     "DEG1_3"     "DEG2_4"     "DEG2_5"     "DEG2_6"     "ENH1_1"     "ENH1_2"     "ENH1_3"     "ENH2_4"     "ENH2_5"
# "ENH2_6"     "Intact_1_1" "Intact_2_2" "Intact_3_3"
glimpse(nativecover)
nncover <- read.csv("processed/abcover_nonnativecover_nngrasscover.csv") # non-native percent cover from ch1_standdeg_canopy.Rmd
sort(unique(nncover$site_rep))
# "DEG1_1"     "DEG1_2"     "DEG1_3"     "DEG2_4"     "DEG2_5"     "DEG2_6"     "ENH1_1"     "ENH1_2"     "ENH1_3"     "ENH2_4"     "ENH2_5"
# "ENH2_6"     "Intact_1_1" "Intact_2_2" "Intact_3_3"
glimpse(nncover)
nativecover <- nativecover %>%
mutate(site_rep = case_when(
site_rep == "Intact_1_1" ~ "Intact1_1", # old name ~ new name
site_rep == "Intact_2_2" ~ "Intact2_2",
site_rep == "Intact_3_3" ~ "Intact3_3",
TRUE ~ as.character(site_rep)  # Keep other observations unchanged
))
nncover <- nncover %>%
mutate(site_rep = case_when(
site_rep == "Intact_1_1" ~ "Intact1_1", # old name ~ new name
site_rep == "Intact_2_2" ~ "Intact2_2",
site_rep == "Intact_3_3" ~ "Intact3_3",
TRUE ~ as.character(site_rep)  # Keep other observations unchanged
))
nativecover <- nativecover %>%
dplyr::select(!c(X, standtype.x, standtype.y ))
nncover <- nncover %>%
dplyr::select(c(site_rep, percentcover_nonnative))
ab_diversity_native <- ab_diversity %>% # join above ground species diversity with native transect percent cover
left_join(nativecover, by = "site_rep")
ab_diversity_native_nn <- ab_diversity_native %>% # join above ground species diversity with non-native transect percent cover
left_join(nncover, by = "site_rep")
view(ab_diversity_native_nn)
glimpse(ab_diversity_native_nn)
# Rows: 1,450
# Columns: 21
#write.csv(ab_diversity_native_nn, "processed/ab_diversity_native_nn.csv") <-- export data to EXCEL and make graphs there
summary_table_pttrans_sppr_tot <- ab_diversity_native_nn %>%
group_by(standtype, site_rep, nonnative_grass, native_shrub, percentcover_native, percentcover_nonnative) %>%
summarize(total_sppr = n_distinct(species))
# Intact_1 = 9
# I_2 = 12
# I_3 = 6
# ENH_1 = 12
# E_2 = 10
# E_3 = 14
# E_4 = 10
# E_5 = 8
# E_6 = 8
# DEG_1 = 9
# D_2 = 7
# D_3 = 7
# D_4 = 7
# D_5 = 6
# D_6 = 10
summary_table_pttrans_nat <- ab_diversity_native_nn %>%
filter(status == "native") %>%
group_by(standtype, site_rep, nonnative_grass, native_shrub, percentcover_native, percentcover_nonnative) %>%
summarize(native_sppr = n_distinct(species))
summary_table_pttrans_nn <- ab_diversity_native_nn %>%
filter(status == "nonnative") %>%
group_by(standtype, site_rep, nonnative_grass, native_shrub, percentcover_native, percentcover_nonnative) %>%
summarize(nn_sppr = n_distinct(species))
#checking the data
ab_diversity_native_nn %>%
filter(site_rep == "DEG1_1") %>%
# filter(status == "native") %>%
filter(status == "nonnative") %>%
distinct(species)
# SPECIES = 9
# Avena barbata
# Hirschfeldia incana
# Lupinus spp.
# Bromus rubens
# Salvia leucophylla
# Erodium spp.
# Dipterostemon capitatus
# Artemisia californica
# Acmispon maritimus
# NATIVE SPECEIS = 5
# # Lupinus spp.
# Salvia leucophylla
# Dipterostemon capitatus
# Artemisia californica
# Acmispon maritimus
# NONNATIVE SPECIES = 4
# Avena barbata
# Hirschfeldia incana
# Bromus rubens
# Erodium spp.
ab_diversity_totalsppr_regression <- ggplot(data = summary_table_pttrans_sppr_tot,
aes(x = nonnative_grass*100, y = total_sppr, shape = standtype, color = standtype)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 20)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Total species richness (#)",
title = "Total species richness by Non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(ab_diversity_totalsppr_regression)
# I made another figure in excel sheet: sppr_pointintercept.xlsx
ab_diversity_nativesppr_regression <- ggplot(data = summary_table_pttrans_nat,
aes(x = nonnative_grass*100, y = native_sppr, shape = standtype, color = standtype)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 20)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Native species richness (#)",
title = "Native richness by Non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(ab_diversity_nativesppr_regression)
ab_diversity_nnsppr_regression <- ggplot(data = summary_table_pttrans_nn,
aes(x = nonnative_grass*100, y = nn_sppr, shape = standtype, color = standtype)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 20)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Native species richness (#)",
title = "Non-native richness by Non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(ab_diversity_nnsppr_regression)
belttrans_byspecies <- read.csv("deg_beltdensity_byspecies.csv")
sort(unique(belttrans_byspecies$species))
sort(unique(belttrans_byspecies$site))
sort(unique(belttrans_byspecies$origin))
sort(unique(belttrans_byspecies$lifespan))
belttrans_sppr <- belttrans_byspecies %>%
mutate(species = case_when(
species == "Bromus madritensis" ~ "Bromus rubens", # old name ~ new name
species == "Erodium cicutarium" ~ "Erodium spp.",
#    species == "Lupinus spp." ~ "Lupinus bicolor", # lupins are in different transects so leaving as three seperate entries: LUBI, LUSU, and Lupinus spp.
#     species == "Lupinus spp." ~ "Lupinus succulentus",
TRUE ~ as.character(species)  # Keep other observations unchanged
)) %>%
mutate(origin = case_when(
origin == "non-native" ~ "nonnative",
TRUE ~ as.character(origin))) %>%
mutate(lifespan = case_when(
lifespan == "Perennial" ~ "perennial",
TRUE ~ as.character(lifespan))) %>%
rename(rep = transectstand, #rename(new_name = old_name)
status = origin) %>%
filter(site != "ENH2")
belttrans_sppr$site <- factor(belttrans_sppr$site, levels=c("Intact1", "Intact2", "Intact3", "ENH1", "DEG1", "DEG2"))
unique(belttrans_sppr$site)
# combine site and rep to one column
belttrans_sppr$site_rep <- paste(belttrans_sppr$site, belttrans_sppr$rep, sep="_")
belttrans_sppr$site_rep_species <- paste(belttrans_sppr$site_rep, belttrans_sppr$species, sep="_")
belttrans_sppr <- belttrans_sppr %>%
dplyr::select(!c("transectsite", "lifestage"))
sort(unique(belttrans_sppr$site))
glimpse(belttrans_sppr)
sort(unique(belttrans_sppr$site_rep))
sort(unique(belttrans_sppr$species))
belttrans_sppr %>%
filter(site_rep == "DEG2_6") %>%
distinct(species)
#write.csv(belttrans_sppr, "processed/belttrans_sppr.csv")
belttrans_sppr_native <- belttrans_sppr %>% # join above ground species diversity with native transect percent cover
left_join(nativecover, by = "site_rep")
belttrans_sppr_native_nn <- belttrans_sppr_native %>% # join above ground species diversity with non-native transect percent cover
left_join(nncover, by = "site_rep")
view(belttrans_sppr_native_nn)
glimpse(belttrans_sppr_native_nn)
# Rows: 904
# Columns: 21
#write.csv(belttrans_sppr_native_nn, "processed/belttrans_sppr_native_nn.csv") #<-- export to EXCEL to create belt transect sppr figures.
# nov. 6, 2023
# KIT - Can you create a df of the total species list (point intercept transect + belt transect species list) at INT 1-3, ENH 1-3, and DEG 1-6?
belt_sppr <- belttrans_sppr %>% #select only site_rep_species from belt trans data
dplyr::select(c(site_rep_species))
pointintercept_sppr <- ab_diversity_native_nn %>% #select only site_rep_species from belt trans data
dplyr::select(c(site_rep_species))
belt_point_join_sppr <- belt_sppr %>%
full_join(pointintercept_sppr, by = "site_rep_species")
belt_point_join_sppr %>%
summarize(total_sppr = n_distinct(site_rep_species))
# ahhh.... standtype, site_rep, status, etc. needs to be brougt in from somewhere....
belttrans_sppr_native_nn$site_rep <- factor(belttrans_sppr_native_nn$site_rep, levels=c("Intact1_1", "Intact2_2", "Intact3_3", "ENH1_1", "ENH1_2", "ENH1_3", "DEG1_1", "DEG1_2","DEG1_3", "DEG2_4","DEG2_5", "DEG2_6"))
belttrans_sppr_native_nn_sppr_tot <- belttrans_sppr_native_nn %>%
group_by(site_rep) %>%
summarize(total_sppr = n_distinct(species))
print(belttrans_sppr_native_nn_sppr_tot)
# site_rep. total_sppr
# Intact1_1	18
# Intact2_2	21
# Intact3_3	17
# ENH1_1	13
# ENH1_2	16
# ENH1_3	9
# DEG1_1	11
# DEG1_2	8
# DEG1_3	9
# DEG2_4	10
# DEG2_5	7
# DEG2_6	6
summary_table_belt_nat <- belttrans_sppr_native_nn %>%
filter(status == "native") %>%
group_by(site_rep) %>%
summarize(native_sppr = n_distinct(species))
print(summary_table_belt_nat)
# site_rep. native_sppr
# Intact1_1	15
# Intact2_2	17
# Intact3_3	13
# ENH1_1	13
# ENH1_2	14
# ENH1_3	8
# DEG1_1	7
# DEG1_2	8
# DEG1_3	6
# DEG2_4	10
# DEG2_5	7
# DEG2_6	6
#checking the data
belttrans_sppr_native_nn %>%
filter(site_rep == "DEG2_6") %>%
filter(status == "native") %>%
#filter(status == "nonnative") %>%
distinct(species)
# Intact_1 = 15
# I_2 = 17
# I_3 = 13
# ENH_1 = 13
# E_2 = 14
# E_3 = 8
# DEG_1 = 7
# D_2 = 8
# D_3 = 6
# D_4 = 10
# D_5 = 7
# D_6 = 6
summary_table_belt_nn <- belttrans_sppr_native_nn %>%
filter(status == "nonnative") %>%
group_by(standtype, site_rep, nonnative_grass, native_shrub, percentcover_native, percentcover_nonnative) %>%
summarize(nn_sppr = n_distinct(species))
#checking the data
belttrans_sppr_native_nn %>%
filter(site_rep == "DEG1_1") %>%
# filter(status == "native") %>%
filter(status == "nonnative") %>%
distinct(species)
# SPECIES = 9
# Avena barbata
# Hirschfeldia incana
# Lupinus spp.
# Bromus rubens
# Salvia leucophylla
# Erodium spp.
# Dipterostemon capitatus
# Artemisia californica
# Acmispon maritimus
# NATIVE SPECEIS = 5
# # Lupinus spp.
# Salvia leucophylla
# Dipterostemon capitatus
# Artemisia californica
# Acmispon maritimus
# NONNATIVE SPECIES = 4
# Avena barbata
# Hirschfeldia incana
# Bromus rubens
# Erodium spp.
belttrans_sppr_totalsppr_regression <- ggplot(data = belttrans_sppr_native_nn,
aes(x = nonnative_grass*100,
y = total_sppr,
shape = standtype,
color = standtype)) + #color = standtype
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 18)) +
ylim(0, 20)+
xlim(0,100) +
geom_smooth(method = "lm", se = FALSE, linetype = "solid", color = "black") +  # lm, loess, glm
scale_color_manual(values = c(standcolors),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) + #rename standtypes labels
labs(x = "Non-native grass cover (%)",
y = "Total species richness (#)",
title = "Total species richness by Non-native grass cover") +
theme_bw() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2")))
print(belttrans_sppr_totalsppr_regression)
unique(abcover_byspecies$standtype)
abcover_byspecies <- abcover_full_v_omitground %>%
group_by(standtype, site, site_rep, species) %>%
filter(site_rep != "Intact4_4") %>% #omit Intact 4 from data
filter(!is.na(species)) %>% # omit blank cells in species
dplyr::summarize(
count_per_dist = n_distinct(site_rep_dist),
percentcover = n_distinct(site_rep_dist)/41) %>%
dplyr::select(!c(count_per_dist))
head(abcover_byspecies) # prints to new tab
unique(abcover_byspecies$standtype)
unique(abcover_byspecies$site)
unique(abcover_byspecies$site_rep)
unique(abcover_byspecies$species)
=======
x = break1,
xend = modelxend,
y = modelybeg,
yend = modelyend)
# second row of the psi-matrix
my.lines <- data.frame(psi = my.seg$psi[, 2], label = round(my.seg$psi[, 2], digits = 3))
r2 <- round(summary(my.seg)$adj.r.squared, digits = 4)
modelgraph_nnngrass <- p1 +
geom_point(aes(shape = standtype.y, color = standtype.y)) +
scale_color_manual(values = c("salmon2", "green4", "lightblue3"),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) +
geom_vline(xintercept = my.lines$psi, linetype = "dashed") +
geom_segment(
data = segment_data,
mapping = aes(x=x, y=y, xend=xend, yend=yend),
inherit.aes = FALSE) +
geom_text(data = my.lines,
mapping = aes(x = psi, y = rep(0.85, length(my.lines$psi)), label = label),
inherit.aes = FALSE,
hjust = 1) +
geom_text(mapping = aes(x = 0.3, y = 0.8, hjust = 1, label=paste("Adjusted R Squared:", "\n", r2)), inherit.aes = FALSE)
modelgraph_nnngrass
# KIT - can you let me know if I ran this and the next chunck correctly - and why my shapes aren't showing up for this figure? Thank you!
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover
# [order(abcover_nativecover_nngrasscover$nonnative_forb, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$native_shrub, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(y = nonnative_forb, x = native_shrub))
model <- lm(nonnative_forb ~ native_shrub, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model,
seg.Z = ~ native_shrub,
npsi = 2 #this is where you change number of thresholds?
)
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- 0 #min(abcover_nativecover_nngrasscover2$nonnative_forb, n = 1)
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
# KIT - can you let me know if I ran this and the next chunck correctly - and why my shapes aren't showing up for this figure? Thank you!
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover[order(abcover_nativecover_nngrasscover$nonnative_forb, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$native_shrub, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(y = nonnative_forb, x = native_shrub))
model <- lm(nonnative_forb ~ native_shrub, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model,
seg.Z = ~ native_shrub,
npsi = 2 #this is where you change number of thresholds?
)
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- 0 #min(abcover_nativecover_nngrasscover2$nonnative_forb, n = 1)
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
# KIT - can you let me know if I ran this and the next chunck correctly - and why my shapes aren't showing up for this figure? Thank you!
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover[order(abcover_nativecover_nngrasscover$nonnative_forb, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$native_shrub, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(y = nonnative_forb, x = native_shrub))
model <- lm(nonnative_forb ~ native_shrub, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model,
seg.Z = ~ native_shrub,
npsi = 1 #this is where you change number of thresholds?
)
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- 0 #min(abcover_nativecover_nngrasscover2$nonnative_forb, n = 1)
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
modelxend <- c(tail(break1, n = length(break1)-1), tail)
for (i in 1:bpcount) {
modelybeg[i] <- slope1[i]*break1[i] + intercept[i]
modelyend[i] <- slope1[i]*modelxend[i] + intercept[i]
}
segment_data = data.frame(
x = break1,
xend = modelxend,
y = modelybeg,
yend = modelyend)
# second row of the psi-matrix
my.lines <- data.frame(psi = my.seg$psi[, 2], label = round(my.seg$psi[, 2], digits = 3))
r2 <- round(summary(my.seg)$adj.r.squared, digits = 4)
modelgraph_nnngrass <- p1 +
geom_point(aes(shape = standtype.y, color = standtype.y)) +
scale_color_manual(values = c("salmon2", "green4", "lightblue3"),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) +
geom_vline(xintercept = my.lines$psi, linetype = "dashed") +
geom_segment(
data = segment_data,
mapping = aes(x=x, y=y, xend=xend, yend=yend),
inherit.aes = FALSE) +
geom_text(data = my.lines,
mapping = aes(x = psi, y = rep(0.85, length(my.lines$psi)), label = label),
inherit.aes = FALSE,
hjust = 1) +
geom_text(mapping = aes(x = 0.3, y = 0.8, hjust = 1, label=paste("Adjusted R Squared:", "\n", r2)), inherit.aes = FALSE)
modelgraph_nnngrass
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover[order(abcover_nativecover_nngrasscover$native_forb, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$native_forb, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(y = native_forb, x = native_shrub))
model <- lm(native_forb ~ native_shrub, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model, npsi = 2)
plot(fitted(my.seg))
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- min(abcover_nativecover_nngrasscover2$percentcover_native, n = 1)
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
modelxend <- c(tail(break1, n = length(break1)-1), tail)
for (i in 1:bpcount) {
modelybeg[i] <- slope1[i]*break1[i] + intercept[i]
modelyend[i] <- slope1[i]*modelxend[i] + intercept[i]
}
segment_data = data.frame(
x = break1,
xend = modelxend,
y = modelybeg,
yend = modelyend)
# second row of the psi-matrix
my.lines <- data.frame(psi = my.seg$psi[, 2], label = round(my.seg$psi[, 2], digits = 3))
r2 <- round(summary(my.seg)$adj.r.squared, digits = 4)
modelgraph_nngrass <- p1 +
geom_point(aes(shape = standtype.x, color = standtype.x)) +
scale_color_manual(values = c("salmon2", "green4", "lightblue3"),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) +
geom_vline(xintercept = my.lines$psi, linetype = "dashed") +
geom_segment(
data = segment_data,
mapping = aes(x=x, y=y, xend=xend, yend=yend),
inherit.aes = FALSE) +
geom_text(data = my.lines,
mapping = aes(x = psi, y = rep(0.85, length(my.lines$psi)), label = label),
inherit.aes = FALSE,
hjust = 1) +
geom_text(mapping = aes(x = 0.3, y = 0.8, hjust = 1, label=paste("Adjusted R Squared:", "\n", r2)), inherit.aes = FALSE)
modelgraph_nngrass
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover
# [order(abcover_nativecover_nngrasscover$native_forb, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$native_forb, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(y = native_forb, x = native_shrub))
model <- lm(native_forb ~ native_shrub, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model, npsi = 2)
plot(fitted(my.seg))
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- min(abcover_nativecover_nngrasscover2$percentcover_native, n = 1)
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
modelxend <- c(tail(break1, n = length(break1)-1), tail)
for (i in 1:bpcount) {
modelybeg[i] <- slope1[i]*break1[i] + intercept[i]
modelyend[i] <- slope1[i]*modelxend[i] + intercept[i]
}
segment_data = data.frame(
x = break1,
xend = modelxend,
y = modelybeg,
yend = modelyend)
# second row of the psi-matrix
my.lines <- data.frame(psi = my.seg$psi[, 2], label = round(my.seg$psi[, 2], digits = 3))
r2 <- round(summary(my.seg)$adj.r.squared, digits = 4)
modelgraph_nngrass <- p1 +
geom_point(aes(shape = standtype.x, color = standtype.x)) +
scale_color_manual(values = c("salmon2", "green4", "lightblue3"),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) +
geom_vline(xintercept = my.lines$psi, linetype = "dashed") +
geom_segment(
data = segment_data,
mapping = aes(x=x, y=y, xend=xend, yend=yend),
inherit.aes = FALSE) +
geom_text(data = my.lines,
mapping = aes(x = psi, y = rep(0.85, length(my.lines$psi)), label = label),
inherit.aes = FALSE,
hjust = 1) +
geom_text(mapping = aes(x = 0.3, y = 0.8, hjust = 1, label=paste("Adjusted R Squared:", "\n", r2)), inherit.aes = FALSE)
modelgraph_nngrass
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover[order(abcover_nativecover_nngrasscover$native_forb, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$native_forb, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(y = native_forb, x = native_shrub))
model <- lm(native_forb ~ native_shrub, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model, npsi = 2)
plot(fitted(my.seg))
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- min(abcover_nativecover_nngrasscover2$percentcover_native, n = 1)
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
modelxend <- c(tail(break1, n = length(break1)-1), tail)
for (i in 1:bpcount) {
modelybeg[i] <- slope1[i]*break1[i] + intercept[i]
modelyend[i] <- slope1[i]*modelxend[i] + intercept[i]
}
segment_data = data.frame(
x = break1,
xend = modelxend,
y = modelybeg,
yend = modelyend)
# second row of the psi-matrix
my.lines <- data.frame(psi = my.seg$psi[, 2], label = round(my.seg$psi[, 2], digits = 3))
r2 <- round(summary(my.seg)$adj.r.squared, digits = 4)
modelgraph_nngrass <- p1 +
geom_point(aes(shape = standtype.x, color = standtype.x)) +
scale_color_manual(values = c("salmon2", "green4", "lightblue3"),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) +
geom_vline(xintercept = my.lines$psi, linetype = "dashed") +
geom_segment(
data = segment_data,
mapping = aes(x=x, y=y, xend=xend, yend=yend),
inherit.aes = FALSE) +
geom_text(data = my.lines,
mapping = aes(x = psi, y = rep(0.85, length(my.lines$psi)), label = label),
inherit.aes = FALSE,
hjust = 1) +
geom_text(mapping = aes(x = 0.3, y = 0.8, hjust = 1, label=paste("Adjusted R Squared:", "\n", r2)), inherit.aes = FALSE)
modelgraph_nngrass
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model,
seg.Z = ~ nonnative_grass
)
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover[order(abcover_nativecover_nngrasscover$native_grass, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$nonnative_grass, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(x = nonnative_grass, y = native_grass))
model <- lm(native_grass ~ nonnative_grass, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model,
seg.Z = ~ nonnative_grass
)
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- 0
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
modelxend <- c(tail(break1, n = length(break1)-1), tail)
for (i in 1:bpcount) {
modelybeg[i] <- slope1[i]*break1[i] + intercept[i]
modelyend[i] <- slope1[i]*modelxend[i] + intercept[i]
}
segment_data = data.frame(
x = break1,
xend = modelxend,
y = modelybeg,
yend = modelyend)
# second row of the psi-matrix
my.lines <- data.frame(psi = my.seg$psi[, 2], label = round(my.seg$psi[, 2], digits = 3))
r2 <- round(summary(my.seg)$adj.r.squared, digits = 4)
modelgraph_nngrass <- p1 +
geom_point(aes(shape = standtype.y, color = standtype.y)) +
scale_color_manual(values = c("salmon2", "green4", "lightblue3"),
name = "Stand Type",
labels = c("intact" = "shrub dominated",
"matrix" = "matrix",
"degraded" = "grass dominated")) +
geom_vline(xintercept = my.lines$psi, linetype = "dashed") +
geom_segment(
data = segment_data,
mapping = aes(x=x, y=y, xend=xend, yend=yend),
inherit.aes = FALSE) +
geom_text(data = my.lines,
mapping = aes(x = psi, y = rep(0.85, length(my.lines$psi)), label = label),
inherit.aes = FALSE,
hjust = 1) +
geom_text(mapping = aes(x = 0.3, y = 0.8, hjust = 1, label=paste("Adjusted R Squared:", "\n", r2)), inherit.aes = FALSE)
modelgraph_nngrass
abcover_nativecover_nngrasscover2 <- abcover_nativecover_nngrasscover[order(abcover_nativecover_nngrasscover$native_grass, decreasing = TRUE),]
tail <- max(abcover_nativecover_nngrasscover2$nonnative_grass, n = 1)
p1 <- ggplot(abcover_nativecover_nngrasscover2, aes(x = nonnative_grass, y = native_grass))
model <- lm(native_grass ~ nonnative_grass, data = abcover_nativecover_nngrasscover2)
#analyze breakpoints
# have to provide estimates for breakpoints.
# after looking a the data,
my.seg <- segmented(model,
seg.Z = ~ nonnative_grass,
npsi = 2
)
bp <- as.data.frame(my.seg$psi)
bp <- as.list(bp$Est.)
bpcount <- length(bp) + 1
bpcount1 <- length(bp) - 1
modelxbeg <- rep(NaN, times = bpcount)
modelxend <- rep(NaN, times = bpcount)
modelybeg <- rep(NaN, times = bpcount)
modelyend <- rep(NaN, times = bpcount)
intercept <- rep(NaN, times = bpcount)
slope1 <- rep(NaN, times = bpcount)
break1 <- rep(NaN, times = bpcount)
for (i in 1:bpcount) {
break1[i] <- my.seg$psi[[i+bpcount1]]
if (i == 1) {
slope1[i] <- coef(my.seg)[[2]]
intercept[i] <- coef(my.seg)[[1]]
break1[i] <- 0
}
else {
slope1[i] <- slope1[i-1] + coef(my.seg)[[i+1]]
intercept[i] <- (intercept[i-1] + slope1[i-1]*break1[i]) - (slope1[i]*break1[i])
}
}
abcover_sum <- read.csv("processed/coverstatus.csv")
abcover_sum[,12] <- c("INT1", "INT2", "INT3", "ENH1", "ENH1", "ENH1", "ENH2", "ENH2", "ENH2", "DEG1", "DEG1", "DEG1", "DEG2", "DEG2", "DEG2")
abcover_sum <- abcover_sum %>%
rename(hill = V12) %>%
dplyr::select(!c(X, standtype, site_rep, native_fern, native_forb, nonnative_fern, nonnative_forb, nonnative_shrub, native_grass)) %>%
group_by(hill) %>%
summarise(across(nonnative_grass:native_shrub, mean))
abcover_sum <- cbind(abcover_sum[1], stack(abcover_sum[2:3])) %>%
rename(proportion = values,
type = ind) %>%
mutate(proportion = 100*proportion)
seedbank_byfamilystatus_proportion_1 <- seedbank_byfamilystatus_proportion %>%
group_by(site, family, status) %>%
summarize(across(proportion_germination, mean))
seedbank_byfamilystatus_proportion_hill <- seedbank_byfamily_status %>%
left_join(seedbank_byfamily_count, by = c("stand_core")) %>%
group_by(family, site) %>%
summarise(across(totalgerm_family:totalgerm_family_bystandcore, mean)) %>%
mutate(proportion_germination = (totalgerm_family/totalgerm_family_bystandcore)*100)
ggplot(seedbank_byfamilystatus_proportion %>%
dplyr::filter(status == "native" | status == "nonnative"),
aes(fill=family, y=proportion_germination, x=stand_core)) +
geom_bar(position="stack", stat="identity") +
ggtitle("Relative Germination by Family and Status") +
labs(x="Soil Core", y="Relative Germination") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_wrap(~ status)
barwidth <- 0.35
ggplot() +
geom_bar(data = abcover_sum,
mapping = aes(x = as.numeric(interaction(hill)) + barwidth, y = proportion, fill = type),
stat="identity",
position='stack',
width = barwidth) +
scale_fill_manual(values = c("green3", "pink2")) +
new_scale_fill() +
geom_bar(data = subset(seedbank_byfamilystatus_proportion_1, status == "native"),
mapping = aes(x = as.numeric(interaction(site)), y = proportion_germination, fill = family),
stat="identity",
position='stack' ,
width = barwidth) +
ggtitle("Native") +
xlab("site") +
scale_x_continuous(breaks=c(1.25,2.25,3.25,4.25,5.25,6.25,7.25),labels=c("Deg1","Deg2","Enh1", "Enh1", "Int1", "Int2", "Int3"))
View(seedbank_load_v)
View(seedbank_load)
unique(seedbank_load$species_diversity)
View(seedbank_load)
seedbank_load_sorted <- seedbank_load[order(seedbank_load$species_diversity),]
unique(seedbank_load$species_diversity)
unique(seedbank_load_sorted$species_diversity)
View(ab_diversity)
View(ab_diversity)
View(seedbank_byfamily)
View(seedbank_load)
View(abcover_full)
>>>>>>> Stashed changes
