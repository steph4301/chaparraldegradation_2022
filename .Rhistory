family == "litter" ~ "ground",
family == "rock" ~ "ground",
TRUE ~ family)) %>%
mutate(species = case_when(species == "BG bare ground" ~ "bare_ground",
species == "ground" ~ "bare_ground",
species == "native_litter" ~ "litter",
species == "nonnative_thatch" ~ "thatch",
species == "Bromus diandrus BRDI" ~ "Bromus diandrus",
species == "Bromus rubens BRRU" ~ "Bromus rubens",
species == "Bromus hordeaceus BRHO" ~ "Bromus hordeaceus",
species == "Rapistrum rugosum - round pods" ~ "Rapistrum rugosum",
species == "HIIN Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
species == "Salvia lucophylla" ~ "Salvia leucophylla",
species == "Malacothamnus fasciculatus " ~ "Malacothamnus fasciculatus",
species == "dead HEAR" ~ "Heteromeles arbutifolia dead",
species == "dead MAFA" ~ "Malacothamnus fasciculatus dead",
species == "dead RHIL" ~ "Rhamnus ilicifolia dead",
species == "dead ARCA" ~ "Artemisia californica dead",
species == "dead SALE" ~ "Salvia leucophylla dead",
species == "ACGL Acmispon glaber" ~ "Acmispon glaber",
species == "Acmispon maritimus - round, sevfl" ~ "Acmispon maritimus",
species == "Acmispon strigosus - oval, sevfl" ~ "Acmispon strigosus",
species == "Mirabilis laevis var. crassifolia" ~ "Mirabilis laevis",
TRUE ~ species)) %>%
add_row(species = "Cryptantha spp.",
lifeform = "forb",
status = "native",
lifecycle = "annual",
family = "Boraginaceae ") %>%
add_row(species = "Acmispon glaber dead",
lifeform = "forb",
status = "native",
lifecycle = "annual",
family = "Fabaceae ") %>%
add_row(species = "Uropappus lindleyi",
lifeform = "forb",
status = "native",
lifecycle = "annual",
family = "Asteraceae   ") %>%
distinct()
ab_species <- sort(unique(abcover_full$species))
species_species <- sort(unique(specieslist$species))
#These are the species that are in abcover_full that are NOT in the species list
difab <- setdiff(ab_species, species_species)
difab
#These are the species that are in the species list that are NOT in abcover_full
difsp <- setdiff(species_species, ab_species)
difsp
abcover_charateristics <- abcover_full %>%
left_join(specieslist, by = "species")
view(abcover_charateristics %>%  dplyr::select(species =
"Claytonia"))
view(abcover_charateristics)
write.csv(specieslist, file = "processed/specieslist.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # includes ggplot2 - data visulization, dplyr, tidyr, readr, purr, tibble, stringr, forcats
library(ggpubr) # customize ggplot2 for publication
library(broom)
library(AICcmodavg)
library(vegan)
library(readxl) # for .xls and .xlsx sheets
library(janitor)
library(calecopal)
library(multcompView)
library(plotly)
if (!require(devtools)) {
install.packages("devtools")
}
devtools::install_github("gavinsimpson/ggvegan")
library(here)
library(ggpmisc)
devtools::install_github("an-bui/calecopal")
library(calecopal)
# names(cal_palettes)
### chaparral1, chaparral2, chaparral3
cal_palette(name = "chaparral3", n = 3, type = "continuous")
# site colors
site1 <- "#DCC27A"
site2 <-  "#D98A63"
intact <- "#92A587"
#
# #species colors
# HEAR <- "#D3E3CA"
# RHOV <- "#92A587"
# RHIL <- "#2F3525"
#
# MAFA <- "gray60"
# SALE <- "gray40"
# ARCA <- "gray20"
#
# scl <- 16
# css <- 17
#
# colors_scl <- c(HEAR, RHOV, RHIL)
# colors_css <- c(MAFA, SALE, ARCA)
#
# # Lifeform colors: shrub, grass, forb
# shrub <- "green4"
# grass <- "yellow2"
# forb <- "purple2"
# fern <- "black"
# colors_lifeform <- c(shrub, grass, forb, fern)
#
# # Status colors: native, exotic
# native <- "black"
# nonnative <- "maroon"
# unknown <- "lightblue"
# colors_status <- c(native, nonnative, unknown)
# "orange", "lightblue", "limegreen", "deeppink","mediumpurple2", "darkgreen"
#view(abcover_charateristics)
str(abcover_charateristics)
sort(unique(abcover_charateristics$species))
sort(unique(abcover_charateristics$site_rep))
# ### 1. load 2019 point intercept transect data from csv
# file_transect_2019_load <- read_excel("deg_percentcover_byspecies_bylifeform_2024.xlsx", sheet = "2019_data")
# # -- years 2017, 2019
# # -- Site 1: transects 1-6
# # -- Site 2: transects 1-6
# # -- INT1, INT2, INT3, INT4
# transect2019 <- file_transect_2019_load %>%
#   dplyr::select(c(site, transect, year, distance, vertical, species)) %>% # select columns to full join with 2024 data
#   filter(year %in% c(2017, 2019)) %>% #filter data to 2019 data
#   dplyr::select(year, site, transect, distance, vertical, species)
# ### 2. load 2024 point intercept transect data from csv
# file_transect_2024_load <- read.csv("Transects_2024 - transect.csv", header = TRUE, na.strings=c("","NA"))
# # -- years 2024
# # -- Site 1: transects 7-14
# # -- Site 2: transects 7-21
# # -- INT5
# transect2024 <- file_transect_2024_load %>%
#   dplyr::select(c(site, transect, year, distance, vertical, species)) %>%
#   filter(species != "N/A")
### 3. full join transect data
#abcover_fulljoin <- full_join(transect2019, transect2024, by = intersect(names(transect2019), names(transect2024)))
### 4. convert dataframe to tibble and correct species names in 2019 and 2024 data
# abcover_fulljoin_tib <- as_tibble(abcover_fulljoin)
# class(abcover_fulljoin_tib)
#
# abcover_full <- abcover_fulljoin_tib %>%
#    mutate(site_rep = paste(site, transect, sep = "_")) %>% # combine site and rep to one column
#    mutate(site_rep_dist = paste(site_rep, distance, sep = "_")) %>%  # combine site_rep and distance to one column
#    mutate(species = case_when(species == "BG bare ground" ~ "bare_ground", # oldname ~ newname
#                               species == "ground" ~ "bare_ground",
#                               species == "native_litter" ~ "litter",
#                               species == "nonnative_thatch" ~ "thatch",
#                               species == "Bromus diandrus BRDI" ~ "Bromus diandrus",
#                               species == "Bromus rubens BRRU" ~ "Bromus rubens",
#                               species == "Bromus hordeaceus BRHO" ~ "Bromus hordeaceus",
#                               species == "Rapistrum rugosum - round pods" ~ "Rapistrum rugosum",
#                               species == "HIIN Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
#                               species == "Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
#                               species == "Salvia lucophylla" ~ "Salvia leucophylla",
#                               species == "Malacothamnus fasciculatus " ~ "Malacothamnus fasciculatus",
#                               species == "dead HEAR" ~ "Heteromeles arbutifolia dead",
#                               species == "dead MAFA" ~ "Malacothamnus fasciculatus dead",
#                               species == "dead RHIL" ~ "Rhamnus ilicifolia dead",
#                               species == "dead ARCA" ~ "Artemisia californica dead",
#                               species == "dead SALE" ~ "Salvia leucophylla dead",
#                               species == "ACGL Acmispon glaber" ~ "Acmispon glaber",
#                               species == "Acmispon maritimus - round, sevfl" ~ "Acmispon maritimus",
#                               species == "Acmispon strigosus - oval, sevfl" ~ "Acmispon strigosus",
#                               species == "Sambucus nigra" ~ "Sambucus mexicana",
#                               species == "Blitum californicum" ~ "Chenopodium californicum",
#                               TRUE ~ species)) %>%
#    mutate(
#       year = as.character(year),
#       site = as.character(site),
#       transect = as.character(transect),
#       distance = as.character(distance),
#       vertical = as.character(vertical),
#       species = as.character(species)
#       )
# ### 5. creating a corrected species list
# specieslist <- file_transect_2019_load %>%
#   dplyr::select(species, lifeform, status, lifecycle, family) %>%
#    mutate(status = case_when(status == "Native" ~ "native", # oldname ~ newname
#                                 status == "Non-native" ~ "nonnative",
#                                 status == "thatch" ~ "ground",
#                                 status == "litter" ~ "ground",
#                                 status == "rock" ~ "ground",
#                                 TRUE ~ status)) %>%
#    mutate(lifeform = case_when(lifeform == "Grass" ~ "grass",
#                                 lifeform == "Shrub" ~ "shrub",
#                                 lifeform == "Forb" ~ "forb",
#                                 lifeform == "thatch" ~ "ground",
#                                 lifeform == "litter" ~ "ground",
#                                 lifeform == "rock" ~ "ground",
#                                 TRUE ~ lifeform)) %>%
#    mutate(lifecycle = case_when(lifecycle == "Annual" ~ "annual",
#                                 lifecycle == "Perennial" ~ "perennial",
#                                 lifecycle == "thatch" ~ "ground",
#                                 lifecycle == "litter" ~ "ground",
#                                 lifecycle == "rock" ~ "ground",
#                                 TRUE ~ lifecycle)) %>%
#    mutate(family = case_when(family == "thatch" ~ "ground",
#                              family == "litter" ~ "ground",
#                              family == "rock" ~ "ground",
#                                 TRUE ~ family)) %>%
#    mutate(species = case_when(species == "BG bare ground" ~ "bare_ground",
#                                 species == "ground" ~ "bare_ground",
#                                 species == "native_litter" ~ "litter",
#                                 species == "nonnative_thatch" ~ "thatch",
#                                 species == "Bromus diandrus BRDI" ~ "Bromus diandrus",
#                                 species == "Bromus rubens BRRU" ~ "Bromus rubens",
#                                 species == "Bromus hordeaceus BRHO" ~ "Bromus hordeaceus",
#                                 species == "Rapistrum rugosum - round pods" ~ "Rapistrum rugosum",
#                                 species == "HIIN Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
#                                 species == "Hirschfeldia incana - long pods" ~ "Hirschfeldia incana",
#                                 species == "Salvia lucophylla" ~ "Salvia leucophylla",
#                                 species == "Malacothamnus fasciculatus " ~ "Malacothamnus fasciculatus",
#                                 species == "dead HEAR" ~ "Heteromeles arbutifolia dead",
#                                 species == "dead MAFA" ~ "Malacothamnus fasciculatus dead",
#                                 species == "dead RHIL" ~ "Rhamnus ilicifolia dead",
#                                 species == "dead ARCA" ~ "Artemisia californica dead",
#                                 species == "dead SALE" ~ "Salvia leucophylla dead",
#                                 species == "ACGL Acmispon glaber" ~ "Acmispon glaber",
#                                 species == "Acmispon maritimus - round, sevfl" ~ "Acmispon maritimus",
#                                 species == "Acmispon strigosus - oval, sevfl" ~ "Acmispon strigosus",
#                                 species == "Mirabilis laevis var. crassifolia" ~ "Mirabilis laevis",
#                                 TRUE ~ species)) %>%
#   distinct()
# ### 6. code to update list of species characteristics
# ab_species <- sort(unique(abcover_full$species))
# species_species <- sort(unique(specieslist$species))
#
# #These are the species that are in abcover_full that are NOT in the species list
# difab <- setdiff(ab_species, species_species)
# difab
#
# #These are the species that are in the species list that are NOT in abcover_full
# difsp <- setdiff(species_species, ab_species)
# difsp
#
# # new.specieslist <- specieslist %>%
# #   add_row(species = "",
# #           lifeform = "",
# #           status = "",
# #           lifecycle = "",
# #           family = "")
#
# # # Rename if need be renamed
# # new.specieslist <- specieslist %>%
# #     mutate(species = case_when(species == "Mirabilis laevis var. crassifolia" ~ "Mirabilis laevis",
# #                                TRUE ~ species))
# #
# # new.abcover_full <- abcover_full %>%
# #     mutate(species = case_when(species == "Blitum californicum" ~ "Chenopodium californicum",
# #                                species == "Sambucus nigra" ~ "Sambucus mexicana",
# #                                TRUE ~ species))
# #
# # new.ab_species <- sort(unique(new.abcover_full$species))
# # new.species_species <- sort(unique(new.specieslist$species))
# #
# # new.ab_species == new.species_species
# #
# # #These are the species that are in abcover_full that are NOT in the species list
# # new.difab <- setdiff(new.ab_species, new.species_species)
# # new.difab
# #
# # #These are the species that are in the species list that are NOT in abcover_full
# # new.difsp <- setdiff(new.species_species, new.ab_species)
# # new.difsp
# #
# #
# # # Run the code below when you are sure you added everything correctly
# # specieslist <- new.specieslist
# # abcover_full <- new.abcover_full
# #
# #write.csv(specieslist, file = "specieslist.csv")
abcover_full_v_omitground <- abcover_charateristics %>%
filter(!(species %in% c("bare_ground", "moss", "rock", "litter", "thatch", "no_species"))) %>%
# run the code below if you want to omit "dead" species and to combine all Bromus into "Bromus spp."
mutate(species = case_when(species == "Acmispon glaber dead" ~ "Acmispon glaber",
species == "Artemisia californica dead" ~ "Artemisia californica",
species == "Ceanothus oliganthus dead" ~ "Ceanothus oliganthus",
species == "Elymus condensatus dead" ~ "Elymus condensatus",
species == "Heteromeles arbutifolia dead" ~ "Heteromeles arbutifolia",
species == "Malacothamnus fasciculatus dead" ~ "Malacothamnus fasciculatus",
species == "Marah macrocarpa dead" ~ "Marah macrocarpa",
species == "Rhamnus ilicifolia dead" ~ "Rhamnus ilicifolia",
species == "Salvia leucophylla dead" ~ "Salvia leucophylla",
species == "Stipa lepida dead" ~ "Stipa lepida",
species == "Erodium cicutarium" ~ "Erodium spp.",
species == "Bromus diandrus" ~ "Bromus spp.",
species == "Bromus hordeaceus" ~ "Bromus spp.",
species == "Bromus rubens" ~ "Bromus spp.",
TRUE ~ species))
#sort(unique(abcover_full_v_omitground$species))
#glimpse(abcover_full_v_omitground)
abcover_byspecies <- abcover_full_v_omitground %>%
group_by(site, site_rep, species) %>%
dplyr::summarize(
count_per_transect = sum(n_distinct(site_rep_dist)),
percentcover = (count_per_transect/41)
) %>%
dplyr::select(!c(count_per_transect))
#glimpse(abcover_byspecies)
#species list check
# abcover_full_v_omitground %>%
#   filter(site_rep == "1_1") %>%
#   select(species) %>%
#     distinct() %>%
#   pull()
abcover_byspecies_nmdsprep <- abcover_byspecies %>%
tidyr::spread(species, percentcover) %>% # transpose data so columns are species
replace(is.na(.), 0) # replace NA with zeros
#glimpse(abcover_byspecies_nmdsprep)
abcover_byspecies_nmdsprep_num <- abcover_byspecies_nmdsprep %>%
# use the ungroup() function to take out grouping
ungroup() %>%
dplyr::select(!c(site, site_rep))
# glimpse(abcover_byspecies_nmdsprep_num) # only numbers
# write.csv(abcover_byspecies_nmdsprep, "processed/twinspan_withdeadspecies.csv")
# the AUTOTRANSFORM = F skips the automatic data transformations and uses the input data as is
# - when the raw data contains the information you need (e.g., abundance)
# - when you have a small number of samples or small number of variables
# - when you want to preserve the original scale of the data (e.g., interested in the absolute differences betwen two sets of measurements)
abcover_byspecies_NMDS <- metaMDS(abcover_byspecies_nmdsprep_num,
autotransform = F, # or T
distance = "bray",   # bray or "raup"
k = 2, #dimentions
try = 100, #runs
trymax = 100) # this is more appropriate for my data
# uses the RAUP-CRICK dissimilarity index to calculate pairwise dissimilarities
# - adjusts for spp richness
# - downweights importance of rare spp
# - more useful when interested in community STRUCTURE rather than individual species
# - takes into account differences in species evenness
# abcover_byspecies_NMDS <- metaMDS(abcover_byspecies_nmdsprep_num, distance = "raup")
abcover_byspecies_NMDS
stressplot(abcover_byspecies_NMDS)
# if stress tests are really low ==> I may have insufficient data. :/
plot(abcover_byspecies_NMDS)
ordiplot(abcover_byspecies_NMDS, type = "p")
ordiplot(abcover_byspecies_NMDS, type = "t")
# ab_nmds.fort <- fortify(as.data.frame(abcover_byspecies_NMDS))
scores(abcover_byspecies_NMDS)
# plot_df <- scores(abcover_byspecies_NMDS, display = "sites") %>% # from An's code
#  as.data.frame() %>%
#  rownames_to_column("stand_core") %>%
#  full_join(seedbank_bysitecore, by = "stand_core")
nmds_above_df <- data.frame(abcover_byspecies_NMDS$points, abcover_byspecies_nmdsprep) # join NMDS scores and percent cover by species, including columns: site, site_rep, and count_per_transect
head(nmds_above_df)
nmds_above_df_plotcolor <- ggplot(nmds_above_df,
aes(x = MDS1, y = MDS2, color = site, shape = site)) +
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(values = c(16, 17, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c(site1, site2, intact, intact, intact, intact, intact)) + # in bw
theme_bw() +
# theme(legend.position = c(0.1, 0.85)) + # x, y left corner: 0,0
stat_ellipse(level = .95, linetype = 2, linewidth = 1) +
labs(title = "NMDS of transects by species percent cover", color = "Site", shape = "Site")
nmds_above_df_plotcolor
# code from An Bui: https://rpubs.com/an-bui/vegan-cheat-sheet
abcover_byspecies_nmdsprep <- abcover_byspecies_nmdsprep %>%
mutate(standtype_ID = 1) # create a new column named standtype_ID
abcover_byspecies_nmdsprep$standtype_ID <- 1:40 # populate the standtype_ID column with numnbers 1-40
plot_above_df <- scores(abcover_byspecies_NMDS, display = "sites") %>%
as.data.frame() %>%
rownames_to_column("standtype_ID") %>%
mutate_at(c('standtype_ID'), as.numeric) %>%
full_join(abcover_byspecies_nmdsprep, by = "standtype_ID") %>%
dplyr::select(!c(standtype_ID))
# view(plot_above_df)
# envfit() takes the output of metaMDS() and the species matrix you created
fit_above <- envfit(abcover_byspecies_NMDS, abcover_byspecies_nmdsprep, perm = 999) # pvalues for spp and stand, site, stand_core
# extract p-values for each species
fit_above_pvals <- fit_above$vectors$pvals %>%
as.data.frame() %>%
rownames_to_column("species") %>%
dplyr::rename("pvals" = ".") %>%
filter(!c(species == "standtype_ID"))
#view(fit_above_pvals)
# extract coordinates for species, only keep species with p-val = 0.05
fit_above_spp <- fit_above %>%
scores(., display = "vectors") %>%
as.data.frame() %>%
rownames_to_column("species") %>%
full_join(., fit_above_pvals, by = "species") %>%
#  filter(pvals <= 0.001) %>%  # <-- p-value
# filter(pvals > 0.001 ) %>%
filter(pvals <= 0.05) %>%
filter(!species == 'standtype_ID')
length(fit_above_spp$species) #  <- limited number for visual clarity
fit_above_spp_p005 <- fit_above %>%
scores(., display = "vectors") %>%
as.data.frame() %>%
rownames_to_column("species") %>%
full_join(., fit_above_pvals, by = "species") %>%
filter(pvals <= 0.05) %>%
filter(!species == 'standtype_ID') %>%
left_join((abcover_charateristics %>%
distinct(species, .keep_all = TRUE) %>%
dplyr::select(species, lifeform, status, lifecycle, family)
), by = "species")
#write.csv(fit_above_spp_p005, "~/Dropbox/GRADSCHOOL/Dissertation/R_dissertation/chaparraldegradation_2022/chaparraldegradation_2022/processed/percentcover_nmds_pvalues.csv")
nmds.1 <- ggplot(plot_above_df, aes(x = NMDS1, y = NMDS2)) +
#coord_fixed() +
geom_point(aes( shape = site), size = 5, alpha = 0.8) + #`Bromus rubens`
scale_shape_manual(values = c(15, 18, 1, 2, 3, 4, 5)) +
geom_segment(data = fit_above_spp, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")),
col = "black") +
geom_text(data = fit_above_spp, aes(label = species),
position = position_jitter(width = 0.1, height = 0.1)) +
theme_bw() #+
# theme(legend.position = c(0.125, 0.825))
nmds.1
nmds.1
nmds.1
nmds.1
nmds.1
nmds.1
nmds.1
#ggsave("Ch1_Degradation_figures/nmds_transectbyspecies.png", nmds.1, width = 8, height = 6)
#ggsave("Ch1_Degradation_figures/nmds_transectbyspecies_simplified.png", nmds.1, width = 8, height = 6)
# nmds - by site_rep (aka. hillslope)
nmdsabove_plot_site_rep <- ggplot(plot_above_df,
aes(x = NMDS1, y = NMDS2)) +
coord_fixed() +
#xlim(-1.5,1.5) +
# ylim(-1.5,1.5) +
geom_point(aes(color = Hillslope, shape = Hillslope), size = 3, alpha = 0.8) +
#stat_ellipse(aes(color = site_rep)) +
scale_color_manual(values = c( "lightblue", "cornflowerblue", "blue","green", "darkgreen", "orange", "brown")) + #"gray0",
scale_shape_manual(values = c(17, 17, 17, 15, 15, 16,16)) +
# labs(name = "Hillslope",
#                    labels = c("DEG1" = "Shrub dominated",
#                               "DEG2" = "Matrix",
#                               "ENH1" = "Grass dominated",
#                               "ENH2" = "Shrub dominated",
#                               "INT1" = "Matrix",
#                               "INT2" = "Grass dominated",
#                               "INT3" = "SH3")) + #rename standtypes labels
geom_segment(data = fit_above_spp, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")),
col = "black") +
geom_text(data = fit_above_spp, aes(label = species),
position = position_jitter(width = 0.0, height = 0.0)) +
theme_bw()
nmdsabove_plot_site_rep
# extract coordinates for species, only keep species with p-val = 0.05
fit_above_spp <- fit_above %>%
scores(., display = "vectors") %>%
as.data.frame() %>%
rownames_to_column("species") %>%
full_join(., fit_above_pvals, by = "species") %>%
#  filter(pvals <= 0.001) %>%  # <-- p-value
# filter(pvals > 0.001 ) %>%
filter(pvals <= 0.05) %>%
filter(!species == 'standtype_ID')
length(fit_above_spp$species) #  <- limited number for visual clarity
view(fit_above_spp)
nmds_above_df
view(nmds_above_df)
nmds_above_df_plotcolor
abcover_byspecies_nmdsprep
data_sppprep <- abcover_charateristics %>%
mutate(distance = sprintf("%02s", distance)) %>%
mutate(species = case_when(
site_rep == "2_5" & species == "Bromus spp." ~ "Bromus rubens",   # Modify the species names based on transect_rep
site_rep == "2_6" & species == "Bromus spp." ~ "Bromus rubens",
site_rep == "2_19" & species == "Bromus spp." ~ "Bromus hordeaceus",
site_rep == "INT1_1" & species == "Bromus spp." ~ "Bromus diandrus",
TRUE ~ species
)) %>%
filter(!(species %in% c("bare_ground", "moss", "rock", "litter", "thatch", "no_species")))
# devtools::install_github("jarioksa/twinspan") # if not installed yet
# MS Windows
# https://cran.r-project.org/bin/windows/Rtools/rtools42/rtools.html # You may need rtools updated
# MacOS: install C and Fortran compiler
# in terminal, install Homebrew, which installs 'gcc' and includes a 'gfortran' compiler --> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
# in terminal, install brew install GCC (which includes gfortran): brew install gcc
#install.packages("twinspan", repos = "https://jarioksa.github.io/drat/")
#
library(tidyverse)
library(twinspan)
library(vegan) # for data
data_sppprep <- abcover_charateristics %>%
mutate(distance = sprintf("%02s", distance)) %>%
mutate(species = case_when(
site_rep == "2_5" & species == "Bromus spp." ~ "Bromus rubens",   # Modify the species names based on transect_rep
site_rep == "2_6" & species == "Bromus spp." ~ "Bromus rubens",
site_rep == "2_19" & species == "Bromus spp." ~ "Bromus hordeaceus",
site_rep == "INT1_1" & species == "Bromus spp." ~ "Bromus diandrus",
TRUE ~ species
)) %>%
filter(!(species %in% c("bare_ground", "moss", "rock", "litter", "thatch", "no_species")))
data_pc <- read.csv("twinspan_percentcover.csv")
tw_data_pc <- twinspan(data_pc)
tw_data_pc <- twinspan(data_pc)
View(data_pc)
rownames(data_pc) <- data_pc[,1]
data_pc[,1] <- NULL
View(data_pc)
data_pc[,1]
data_pc[,1] <- NULL
rownames(data_pc) <- data_pc[,1]
data_pc[,1] <- NULL
tw_data_pc <- twinspan(data_pc)
summary(tw_data_pc)
nodePar <- list(lab.cex = 0.4, pch = c(NA, 19),
cex = 0.4, col = "green3")
plot(as.dendrogram(tw_data_pc, "species"), type = "rectangle", nodePar = nodePar) #creates a dendogram based on species
plot(as.dendrogram(tw_data_pc, "quadrat"), type = "rectangle", nodePar = nodePar) #creates a dendogram based on the sample
plot(as.hclust(tw_data_pc, "species")) #creates a Hierarchical Cluster Tree based on the species
plot(as.hclust(tw_data_pc, "quadrat")) #creates a Hierarchical Cluster Tree based on the sample
twintable(tw_data_pc) #the table of relatedness, 00 is closer to 01 than it is to 11 and vice versa
image(tw_data_pc)
misclassified(tw_data_pc) #none~
twintable(tw_data_pc) #the table of relatedness, 00 is closer to 01 than it is to 11 and vice versa
